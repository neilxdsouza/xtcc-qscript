#CFLAGS= -g -Wall -Weffc++ -Wno-sign-compare 
CFLAGS= -g -Wunused-function
#CC = clang --analyze
CC=g++
LIBS = -lncurses -lpanel

SRC= AbstractQuestionnaire.cpp config_parser.cpp \
     data_entry.cpp log_mesg.cpp named_attributes.cpp named_range.cpp \
     qscript_conf.cpp qscript_conf_lex.cpp qscript_data.cpp \
     qscript_debug.cpp qscript_lib.cpp qscript_parser_common.cpp \
     qtm_datafile_conf.cpp qtm_datafile_conf_lex.cpp \
     qtm_datafile_conf_parser.cpp qtm_data_file.cpp QuestionAttributes.cpp \
     question_common.cpp question_logic.cpp question_runtime.cpp \
     read_disk_data.cpp scan_data.cpp \
     utils_common.cpp xtcc_set.cpp 
     #TempNameGenerator.cpp AbstractStatement.cpp  qscript_readline.cpp 

OBJS := $(SRC:.cpp=.o)

%.cpp : %.l
	flex -o$@ $<


data_entry.cpp: YFLAGS = -p scan_data
data_entry.hpp: YFLAGS = -p scan_data

%.cpp %.hpp: %.ypp
	echo "building parser from ypp target : $@ YFLAGS: $(YFLAGS)"
	bison $(YFLAGS) -v -d $< -o $(basename $@).cpp


vegetable-wx.exe: $(OBJS) vegetable-wx.o
	$(CC) $(CFLAGS) -o $@ `wx-config --cppflags` $(OBJS) vegetable-wx.o question_wx2_runtime.C `wx-config --libs `

vegetable.exe: $(OBJS) vegetable.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) vegetable.o question_stdout_runtime.cpp

test_2_1.exe: $(OBJS) test_2_1.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) test_2_1.o  question_stdout_runtime.cpp

test_2.exe: $(OBJS) test_2.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) test_2.o -lpanel -lncurses

%.o: %.cpp
	$(CC) $(CFLAGS) -c $<

test_2.o: test_2.C
	$(CC) $(CFLAGS)  -c $<


test_2_1.o: test_2_1.C
	$(CC) $(CFLAGS)  -c $<

exe_clean:
	rm *.exe


%.dep : %.cpp
	@set -e; rm -f $@; \
		$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
		sed 's,\($*\)\.o[ :]*,\1.o $@ :,g' < $@.$$$$ > $@; \
		rm -f $@.$$$$

-include $(DEPENDENCIES)
