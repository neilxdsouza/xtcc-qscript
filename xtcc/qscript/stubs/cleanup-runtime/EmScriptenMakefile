
#CFLAGS= -g -Wall -Weffc++ -Wno-sign-compare 
CFLAGS= -g -Wunused-function
#CC = clang --analyze
CC=emcc
LIBS = -lncurses -lpanel

SRC= src-emscripten/AbstractQuestionnaire.cpp src-emscripten/config_parser.cpp \
     src-emscripten/data_entry.cpp src-emscripten/log_mesg.cpp src-emscripten/named_attributes.cpp src-emscripten/named_range.cpp \
     src-emscripten/qscript_conf.cpp src-emscripten/qscript_conf_lex.cpp src-emscripten/qscript_data.cpp \
     src-emscripten/qscript_debug.cpp src-emscripten/qscript_lib.cpp src-emscripten/qscript_parser_common.cpp \
     src-emscripten/qtm_datafile_conf.cpp src-emscripten/qtm_datafile_conf_lex.cpp \
     src-emscripten/qtm_datafile_conf_parser.cpp src-emscripten/qtm_data_file.cpp src-emscripten/QuestionAttributes.cpp \
     src-emscripten/question_common.cpp src-emscripten/question_logic.cpp src-emscripten/question_runtime.cpp \
     src-emscripten/read_disk_data.cpp src-emscripten/scan_data.cpp \
     src-emscripten/utils_common.cpp src-emscripten/xtcc_set.cpp
     #src-emscripten/TempNameGenerator.cpp src-emscripten/AbstractStatement.cpp  src-emscripten/qscript_readline.cpp 

SOURCE_DIR=src-emscripten
BUILD_DIR=emscript-build

OBJS = $(subst $(SOURCE_DIR),$(BUILD_DIR),$(SRC))
OBJS := $(OBJS:.cpp=.o)

# uncomment this to see what is going on with the substitutes
#dummy_show_target:
#	echo $(OBJS)

%.cpp : %.l
	flex -o$@ $<


data_entry.cpp: YFLAGS = -p scan_data
data_entry.hpp: YFLAGS = -p scan_data

%.cpp %.hpp: %.ypp
	echo "building parser from ypp target : $@ YFLAGS: $(YFLAGS)"
	bison $(YFLAGS) -v -d $< -o $(basename $@).cpp


vegetable.html: $(OBJS) $(BUILD_DIR)/vegetable.o $(BUILD_DIR)/question_stdout_runtime.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(BUILD_DIR)/vegetable.o $(BUILD_DIR)/question_stdout_runtime.o

vegetable.js: $(OBJS) $(BUILD_DIR)/vegetable.o $(BUILD_DIR)/question_stdout_runtime.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(BUILD_DIR)/vegetable.o $(BUILD_DIR)/question_stdout_runtime.o


test_2_1.js: $(OBJS) test_2_1.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) test_2_1.o  question_stdout_runtime.cpp

test_2.js: $(OBJS) test_2.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) test_2.o 

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.cpp
	$(CC) -o $@ $(CFLAGS) -c $<

#test_2.o: test_2.C
#	$(CC) $(CFLAGS)  -c $<
#
#
#test_2_1.o: test_2_1.C
#	$(CC) $(CFLAGS)  -c $<


$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.C
	$(CC) -o $@  $(CFLAGS)  -c $<

exe_clean:
	rm *.exe


$(BUILD_DIR)/%.dep : $(SOURCE_DIR)/%.cpp
	@set -e; rm -f $@; \
		$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
		sed 's,\($*\)\.o[ :]*,\1.o $@ :,g' < $@.$$$$ > $@; \
		rm -f $@.$$$$

-include $(DEPENDENCIES)
