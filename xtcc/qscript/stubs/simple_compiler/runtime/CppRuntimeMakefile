
#CFLAGS= -g -Wall -Weffc++ -Wno-sign-compare 
CFLAGS= -g -Wunused-function
CXX_SHARED_LIB_FLAGS = -fPIC
CXX_LINK_FLAGS = -g
#CC = clang --analyze
CC=g++
LIBS = -lncurses -lpanel
SOURCE_DIR=cpp/common
SOURCE_ROOT=cpp

SRC= $(SOURCE_DIR)/AbstractQuestionnaire.cpp \
     $(SOURCE_DIR)/data_entry.cpp $(SOURCE_DIR)/log_mesg.cpp $(SOURCE_DIR)/named_attributes.cpp $(SOURCE_DIR)/named_range.cpp \
	$(SOURCE_DIR)/qscript_data.cpp \
     $(SOURCE_DIR)/qscript_debug.cpp $(SOURCE_DIR)/qscript_lib.cpp $(SOURCE_DIR)/qscript_parser_common.cpp \
	$(SOURCE_DIR)/QuestionAttributes.cpp \
     $(SOURCE_DIR)/question_common.cpp $(SOURCE_DIR)/question_logic.cpp $(SOURCE_DIR)/question_runtime.cpp \
     $(SOURCE_DIR)/read_disk_data.cpp $(SOURCE_DIR)/scan_data.cpp \
     $(SOURCE_DIR)/utils_common.cpp $(SOURCE_DIR)/xtcc_set.cpp
     #$(SOURCE_DIR)/TempNameGenerator.cpp $(SOURCE_DIR)/AbstractStatement.cpp  $(SOURCE_DIR)/qscript_readline.cpp 
     #$(SOURCE_DIR)/qtm_datafile_conf.cpp $(SOURCE_DIR)/qtm_datafile_conf_lex.cpp 
     #$(SOURCE_DIR)/qtm_datafile_conf_parser.cpp $(SOURCE_DIR)/qtm_data_file.cpp 
     #$(SOURCE_DIR)/qscript_conf.cpp $(SOURCE_DIR)/qscript_conf_lex.cpp 
	# $(SOURCE_DIR)/config_parser.cpp 

BUILD_ROOT=build
BUILD_COMMON_DIR=build/common

OBJS = $(subst $(SOURCE_DIR),$(BUILD_COMMON_DIR),$(SRC))
OBJS := $(OBJS:.cpp=.o)

# uncomment this to see what is going on with the substitutes
#dummy_show_target:
#	echo $(OBJS)

%.cpp : %.l
	flex -o$@ $<


data_entry.cpp: YFLAGS = -p scan_data
data_entry.hpp: YFLAGS = -p scan_data

%.cpp %.hpp: %.ypp
	echo "building parser from ypp target : $@ YFLAGS: $(YFLAGS)"
	bison $(YFLAGS) -v -d $< -o $(basename $@).cpp

LIBRARY_TARGETS =  $(BUILD_COMMON_DIR)/libqscript_runtime_common.so.1.0.1 \
		   $(BUILD_ROOT)/stdout/question_stdout_runtime.o \
		   $(BUILD_ROOT)/wt/question_wt_runtime.o 
		   #$(BUILD_ROOT)/wx/question_wx2_runtime.o 

runtime_lib: $(LIBRARY_TARGETS)


#runtime_lib: $(SRC) $(OBJS) $(BUILD_ROOT)/stdout/question_stdout_runtime.o
$(BUILD_COMMON_DIR)/libqscript_runtime_common.so.1.0.1: $(SRC) $(OBJS) 
#	echo "RUNTIME_LIB_SOURCES $(RUNTIME_LIB_SOURCES)"
#	echo "RUNTIME_LIB_OBJECTS $(RUNTIME_LIB_OBJECTS)"
	$(CXX) -g -shared -Wl,-soname,libqscript_runtime_common.so.1 -o $(BUILD_COMMON_DIR)/libqscript_runtime_common.so.1.0.1 $(OBJS)
	(cd $(BUILD_COMMON_DIR); ln -s libqscript_runtime_common.so.1.0.1 libqscript_runtime_common.so.1; ln -s libqscript_runtime_common.so.1.0.1 libqscript_runtime_common.so)

$(BUILD_ROOT)/stdout/question_stdout_runtime.o: $(SOURCE_DIR)/question_stdout_runtime.cpp
	$(CC) -o $@ $(CFLAGS)  $(CXX_SHARED_LIB_FLAGS)  -c $<

$(BUILD_ROOT)/wx/question_wx2_runtime.o: $(SOURCE_ROOT)/wx/question_wx2_runtime.C
	$(CC) -I$(SOURCE_ROOT)/common -o $@ $(CFLAGS)  $(CXX_SHARED_LIB_FLAGS) `wx-config --cppflags` -c $<

$(BUILD_ROOT)/wt/question_wt_runtime.o: $(SOURCE_ROOT)/wt/question_wt_runtime.cpp
	$(CC) -I$(SOURCE_ROOT)/common -o $@ $(CFLAGS)  $(CXX_SHARED_LIB_FLAGS)  -c $<

vegetable-wx.exe: $(BUILD_COMMON_DIR)/vegetable-wx.o $(OBJS)  $(BUILD_COMMON_DIR)/question_wx2_runtime.o
	$(CC) $(CFLAGS) -o $@ `wx-config --cppflags` $(OBJS) $< $(BUILD_COMMON_DIR)/question_wx2_runtime.o `wx-config --libs `

vegetable.exe: $(OBJS) $(BUILD_COMMON_DIR)/vegetable.o $(BUILD_COMMON_DIR)/question_stdout_runtime.o
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(BUILD_COMMON_DIR)/vegetable.o $(BUILD_COMMON_DIR)/question_stdout_runtime.o

test_2_1.exe: $(BUILD_COMMON_DIR)/test_2_1.o $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $< question_stdout_runtime.o

test_2.exe: $(BUILD_COMMON_DIR)/test_2.o $(OBJS) 
	$(CC) $(CFLAGS) -o $@ $(OBJS) $< -lpanel -lncurses

$(BUILD_COMMON_DIR)/%.o: $(SOURCE_DIR)/%.cpp
	$(CC) -o $@ $(CFLAGS)  $(CXX_SHARED_LIB_FLAGS) -c $<


$(BUILD_COMMON_DIR)/%.o: $(SOURCE_DIR)/%.C
	$(CC) -o $@ $(CFLAGS)  $(CXX_SHARED_LIB_FLAGS)  -c $<

$(BUILD_COMMON_DIR)/question_wx2_runtime.o : $(SOURCE_DIR)/question_wx2_runtime.C
	$(CC) -o $@  $(CXX_SHARED_LIB_FLAGS) `wx-config --cppflags` -c $<

$(BUILD_COMMON_DIR)/question_stdout_runtime.o : $(SOURCE_DIR)/question_stdout_runtime.cpp
	$(CC) -o $@  $(CXX_SHARED_LIB_FLAGS)  -c $<

#test_2.o: test_2.C
#	$(CC) $(CFLAGS)  -c $<
#
#
#test_2_1.o: test_2_1.C
#	$(CC) $(CFLAGS)  -c $<

exe_clean:
	rm *.exe

clean:
	-rm $(BUILD_COMMON_DIR)/*.o
	-rm $(BUILD_COMMON_DIR)/*.so*


$(BUILD_COMMON_DIR)/%.dep : $(SOURCE_DIR)/%.cpp
	@set -e; rm -f $@; \
		$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
		sed 's,\($*\)\.o[ :]*,\1.o $@ :,g' < $@.$$$$ > $@; \
		rm -f $@.$$$$

-include $(DEPENDENCIES)
