
CC = $(CXX)
CFLAGS = -c -g -I src -Wall -Weffc++
CXX_SHARED_LIB_FLAGS = -fPIC
CXX_LINK_FLAGS = -g
CXX_LINK_LIBS = -lreadline
SOURCE_DIR=src
BUILD_DIR=make-build-dir
CPP_SOURCES = $(wildcard $(SOURCE_DIR)/*.cpp)
EXCLUDE_FILE=src/question_disk_data.cpp src/qscript_lib.cpp src/qscript_data.cpp src/read_disk_data.cpp
CPP_SOURCES := $(filter-out $(EXCLUDE_FILE),$(CPP_SOURCES))
OBJECTS = $(subst $(SOURCE_DIR),$(BUILD_DIR),$(CPP_SOURCES))
OBJECTS := $(OBJECTS:.cpp=.o)
DEPENDENCIES = $(OBJECTS:.o=.dep)

YACC_SOURCES = $(wildcard $(SOURCE_DIR)/*.ypp)
EXCLUDE_FILE = src/qscript_data.ypp
YACC_SOURCES := $(filter-out $(EXCLUDE_FILE),$(YACC_SOURCES) )
YACC_OUTPUTS  = $(YACC_SOURCES:.ypp=.cpp)
YACC_OUTPUTS += $(YACC_SOURCES:.ypp=.hpp)

YACC_OBJECTS = $(YACC_SOURCES)
YACC_OBJECTS := $(subst $(SOURCE_DIR),$(BUILD_DIR),$(YACC_OBJECTS))
YACC_OBJECTS := $(YACC_OBJECTS:.ypp=.o)
OBJECTS += $(YACC_OBJECTS)

LEX_SOURCES = $(wildcard $(SOURCE_DIR)/*.l)
EXCLUDE_FILE=src/read_disk_data.l
LEX_SOURCES := $(filter-out $(EXCLUDE_FILE),$(LEX_SOURCES))
LEX_OBJECTS = $(LEX_SOURCES)
LEX_OBJECTS := $(subst $(SOURCE_DIR),$(BUILD_DIR),$(LEX_OBJECTS))
LEX_OBJECTS := $(LEX_OBJECTS:.l=.o)
OBJECTS += $(LEX_OBJECTS)
OBJECTS := $(sort $(OBJECTS) )

QSCRIPT_MAJOR_VERSION_NUMBER=0
QSCRIPT_MINOR_VERSION_NUMBER=4


#dummy:
#	echo "CPP sources: $(CPP_SOURCES)" 
#	echo "YACC sources: $(YACC_SOURCES)" 
#	echo "LEX sources: $(LEX_SOURCES)" 
#	echo "OBJS $(OBJECTS)"
#	echo "DEPS $(DEPENDENCIES)"
#	echo "YACC OUTPUTS $(YACC_OUTPUTS)"
#	echo "YACC OBJECTS $(YACC_OBJECTS)"
#	echo "LEX OBJECTS $(LEX_OBJECTS)"

$(BUILD_DIR)/qscript: $(CPP_SOURCES) $(OBJECTS) yacc_deps lex_deps
	echo "cpp sources: $(CPP_SOURCES)" 
	echo "yacc sources: $(YACC_SOURCES)" 
	echo "lex sources: $(LEX_SOURCES)" 
	$(CC) $(CXX_LINK_FLAGS) $(CXX_LINK_LIBS) -o $@ $(OBJECTS) 

yacc_deps: $(YACC_OUTPUTS)

$(SOURCE_DIR)/data_entry.cpp: YFLAGS = -p scan_data
$(SOURCE_DIR)/data_entry.hpp: YFLAGS = -p scan_data

$(SOURCE_DIR)/qscript_data.cpp: YFLAGS = -p read_disk_data
$(SOURCE_DIR)/qscript_data.hpp: YFLAGS = -p read_disk_data

$(SOURCE_DIR)/%.cpp $(SOURCE_DIR)/%.hpp: $(SOURCE_DIR)/%.ypp
	echo "building parser from ypp target : $@ YFLAGS: $(YFLAGS)"
	bison $(YFLAGS) -d $< -o $(basename $@).cpp
#bison $(YFLAGS) -d $< -o $(SOURCE_DIR)/$(@F)
#	echo $(SOURCE_DIR)/$(*F).hpp 
#	mv $(SOURCE_DIR)/$(*F).hpp $(SOURCE_DIR)/$(*F).h

lex_deps: $(LEX_OUTPUTS)

$(SOURCE_DIR)/lex.cpp: $(SOURCE_DIR)/q.hpp
$(SOURCE_DIR)/scan_data.cpp: $(SOURCE_DIR)/data_entry.hpp
$(SOURCE_DIR)/read_disk_data.cpp: $(SOURCE_DIR)/qscript_data.hpp

$(SOURCE_DIR)/%.cpp : $(SOURCE_DIR)/%.l
	flex -o $@ $<

$(BUILD_DIR)/%.dep : $(SOURCE_DIR)/%.cpp
	@set -e; rm -f $@; \
		$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
		sed 's,\($*\)\.o[ :]*,\1.o $@ :,g' < $@.$$$$ > $@; \
		rm -f $@.$$$$

RUNTIME_LIB_SOURCES = $(SOURCE_DIR)/xtcc_set.cpp $(SOURCE_DIR)/scan_data.cpp \
		$(SOURCE_DIR)/data_entry.cpp $(SOURCE_DIR)/question.cpp \
		$(SOURCE_DIR)/stmt_common.cpp $(SOURCE_DIR)/qscript_lib.cpp \
		$(SOURCE_DIR)/qscript_data.cpp $(SOURCE_DIR)/read_disk_data.cpp \
		$(SOURCE_DIR)/qscript_parser.cpp $(SOURCE_DIR)/expr.cpp \
		$(SOURCE_DIR)/utils.cpp $(SOURCE_DIR)/symtab.cpp \
		$(SOURCE_DIR)/stmt.cpp $(SOURCE_DIR)/scope.cpp \
		$(SOURCE_DIR)/question_disk_data.cpp

RUNTIME_LIB_OBJECTS = $(subst $(SOURCE_DIR),$(BUILD_DIR)/runtime_lib,$(RUNTIME_LIB_SOURCES) )
RUNTIME_LIB_OBJECTS := $(RUNTIME_LIB_OBJECTS:.cpp=.o)

runtime_lib: $(RUNTIME_LIB_SOURCES) $(RUNTIME_LIB_OBJECTS)
	echo "RUNTIME_LIB_SOURCES $(RUNTIME_LIB_SOURCES)"
	echo "RUNTIME_LIB_OBJECTS $(RUNTIME_LIB_OBJECTS)"
	$(CXX) -g -shared -Wl,-soname,libqscript_runtime.so.1 -o $(BUILD_DIR)/runtime_lib/libqscript_runtime.so.1.0.1 $(RUNTIME_LIB_OBJECTS)


$(BUILD_DIR)/runtime_lib/%.o: $(SOURCE_DIR)/%.cpp
	$(CC) $(CFLAGS) $(CXX_SHARED_LIB_FLAGS) -o $@ $<

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.cpp;
	$(CC) $(CFLAGS) -o $@ $<
	echo "dir of target: $(@D), filename of target $(@F)"

RELEASE_DIR=qscript-$(QSCRIPT_MAJOR_VERSION_NUMBER).$(QSCRIPT_MINOR_VERSION_NUMBER)
release: clean
	-if [ -d $(RELEASE_DIR) ] ; then rm -rf $(RELEASE_DIR) ; fi
	-if [ -f $(RELEASE_DIR).tar ] ; then rm -f $(RELEASE_DIR).tar ; fi
	mkdir -p $(RELEASE_DIR)/bin $(RELEASE_DIR)/lib $(RELEASE_DIR)/src $(RELEASE_DIR)/make-build-dir/runtime_lib \
		$(RELEASE_DIR)/inputs $(RELEASE_DIR)/resources $(RELEASE_DIR)/include
	cp   src/* $(RELEASE_DIR)/src 
	cp -R cmake $(RELEASE_DIR)
	cp CustomQScriptMakefile CMakeLists.txt COPYING README INSTALL_CUSTOM.readme tar-exclude-file-list $(RELEASE_DIR)
	cp inputs/* $(RELEASE_DIR)/inputs
	tar --exclude-from="tar-exclude-file-list" --exclude-vcs -cvf qscript-$(QSCRIPT_MAJOR_VERSION_NUMBER).$(QSCRIPT_MINOR_VERSION_NUMBER).tar $(RELEASE_DIR)

.PHONY: clean

clean:
	-rm -f $(BUILD_DIR)/* $(BUILD_DIR)/runtime_lib/* lib/* bin/* include/*

local_install: $(BUILD_DIR)/qscript runtime_lib
	cp $(BUILD_DIR)/qscript bin
	cp $(BUILD_DIR)/runtime_lib/libqscript_runtime.so.1.0.1 lib
	cp $(BUILD_DIR)/runtime_lib/libqscript_runtime.so.1.0.1 lib/libqscript_runtime.so.1
	cp $(BUILD_DIR)/runtime_lib/libqscript_runtime.so.1.0.1 lib/libqscript_runtime.so.1
	cp $(BUILD_DIR)/runtime_lib/libqscript_runtime.so.1.0.1 lib/libqscript_runtime.so
	cp ${SOURCE_DIR}/*.h include

include $(DEPENDENCIES)
