data_struct;rec_len=140; // This defines the length of each record in the data file

ed_start // this marks the start of the edit program

int8_t a;int8_t b;int8_t d; // these variables here are declared in global scope and will be available in the tabulation
int32_t global_val;	// section
int32_t test_arr[20];

int32_t first_4byte_int;

int32_t edit_data();
void func3(float fundc3_a, int32_t func3_b);
void pass_by_ref(int16_t & ref_param);

int32_t edit_data()
{/*
	   This is  a block comment
	   */
	int32_t ser_no;
	ser_no=c[0,3];
	printf("ser_no:%d\n", ser_no);
	int8_t mychar;
	mychar=c[4];
	a=c[4]; // this data will automatically converted to type int8_t
	//global_val=c[4];
	global_val = 5;
	printf("mychar: %c", mychar);
	mychar=c[5];
	b=c[5];
	printf("mychar: %c", mychar);
	mychar=c[6];
	d=c[7];
	printf("mychar: %c", mychar);
	mychar=c[7];
	printf("mychar: %c", mychar);
	float myfloat;
	myfloat=c[80,83]; // this data will automatically be converted to type float
	lista myfloat "myfloat";

	int32_t int_with_initializer = 1001;

	float myfloat2;
	myfloat2=c[84,87]; // this data will automatically be converted to type float
	//lista myfloat2 "myfloat2";

	first_4byte_int=c[40,43];
	if(first_4byte_int in (1,2,4,202)){
		printf("Operator in test - first_4byte_int in (1,2,4): %d\n", first_4byte_int);
	} else {
		printf("Operator in test - first_4byte_int NOT in (1,2,4): %d\n", first_4byte_int);
	}

	//fld test_arr = c(80,87):4;
	fld test_arr = c(120,139):4;
	
	printf(":float: %f", myfloat);
	
	func3(1.1,2);
	int32_t i;
	for(i=80; i<120; i=i+4){
		float f; // Note that you can define variables anywhere
		f=c[i, i+3];
		printf("f=%f", f);
	}
	if( !i ){
		printf("%s", "Hello,World\n");
	}
	printf("\n");
	int16_t test_param_ref;
	test_param_ref=25;
	printf("before ref_param: i=%d\n", test_param_ref);
	pass_by_ref(test_param_ref);
	printf("after ref_param:i=%d\n", test_param_ref);

	int32_t fld_1;
	fld_1	= c[120,123];
	//lista fld_1 "fld_1";
	int32_t fld_2;
	fld_2 = c[124,127];
	//lista fld_2 "fld_2";
	int32_t fld_3;
	fld_3 = c[128,131];
	//lista fld_3 "fld_3";
	int32_t fld_4;
	fld_4 = c[132,135];
	//lista fld_4 "fld_4";
	int32_t fld_5;
	fld_5 = c[136,139];
	//lista fld_5 "fld_5";

}

void func3(float fundc3_a, int32_t func3_b){
	int32_t d1;
	// I should mark this as an error - uninitialized variable usage
	d1=d1+10;
	printf("called: func3\n");
	if(fundc3_a==1.1){
		printf("fundc3_a==1.1\n");
	} else {
		printf("fundc3_a=%f\n", fundc3_a);
	}
}
void pass_by_ref(int16_t & ref_param){
	printf("pass_by_ref\n");
	ref_param=ref_param+1;
}

ed_end  // This marks the end if the edit program

// this is the tabulation section
tabstart 	{
	tab q1 q2;
	tab q1 q3;
	tab q4 q3;
	tab q5 q3;
	tab q5 q5;
}

// These are the individual axes that can be tabbed
axstart {

ax q1;
ttl; "Q1. Title";
cnt; "less= 20"; c= global_val <= 20; // Note that these global variables were defined in the edit section
cnt; "greater 20"; c= global_val > 20;
cnt; "A "; c= a==65;
cnt; "B"; c= b==66;
cnt; "C"; c= d==68;

ax q2;
ttl; "Q2";
cnt; "row"; c= global_val > 30;
cnt; "A "; c= a==65;
cnt; "B"; c= b==66;
cnt; "C"; c= d==68;

ax q3;
ttl; "Q3";
cnt; "row"; c= global_val > 40;
cnt; "A "; c= a==65;
cnt; "B"; c= b==66;
cnt; "C"; c= d==68;



ax q4;
ttl; "Q4. Integer range tests";
cnt; " from 201 to 219"; c= first_4byte_int>=201 && first_4byte_int < 220;
cnt; " from 221 to 249"; c= first_4byte_int>=220 && first_4byte_int < 250;
cnt; " from 250 to 289"; c= first_4byte_int>=250 && first_4byte_int < 290;
cnt; " from 290 to 369"; c= first_4byte_int>=290 && first_4byte_int < 370;
cnt; " from 370 to 500"; c= first_4byte_int>=370 && first_4byte_int < 501;
inc;  global_val; c= first_4byte_int >= 201 && first_4byte_int <220;
//inc; "inc test"; ser_no; c= first_4byte_int >= 201 && first_4byte_int <220;


ax q5; 
ttl; "Q5";
bit test_arr ;
"Coke" = 1;
"Pepsi" = 2;
"Rani" = 3;
"Masafi"=4;
;


ax q6;
ttl; "Q6";
bit test_arr;
"Action Movies" = 1;
"Soaps" = 2;
"Drama" = 3;
"Theater"=4;
;




/*
ax q4;
ttl; "Q4. Integer range tests";
cnt; " from > 201 "; c= first_4byte_int>201 ;
cnt; " from > 220"; c= first_4byte_int>220 ;
cnt; " from > 250"; c= first_4byte_int>250 ;
cnt; " from > 290"; c= first_4byte_int>290 ;
cnt; " from > 370"; c= first_4byte_int>370 ;
*/
	
}
