Terminals which are not used

   CONVERT
   CODELIST


State 210 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 @1: /* empty */

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END
    3     | AXSTART '{' ax_list '}'
    4     | TABSTART '{' tab_list '}'

    5 top_level_item_list: top_level_item
    6                    | top_level_item_list top_level_item

    7 top_level_item: decl
    8               | func_defn

    9 xtcc_type: VOID_T
   10          | INT8_T
   11          | INT16_T
   12          | INT32_T
   13          | FLOAT_T
   14          | DOUBLE_T

   15 @2: /* empty */

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 compound_stmt

   17 decl: xtcc_type NAME ';'
   18     | xtcc_type NAME '=' expression ';'
   19     | xtcc_type NAME '[' INUMBER ']' ';'
   20     | DEFINELIST NAME '=' range_list ';'
   21     | func_decl

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' ';'

   23 decl_comma_list: var_decl
   24                | decl_comma_list ',' var_decl

   25 var_decl: xtcc_type NAME
   26         | xtcc_type NAME '[' INUMBER ']'
   27         | xtcc_type '&' NAME
   28         | /* empty */

   29 statement_list: statement
   30               | statement_list statement

   31 @3: /* empty */

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 statement
   33          | if_stmt
   34          | expression ';'
   35          | compound_stmt
   36          | decl
   37          | list_stmt
   38          | BREAK ';'
   39          | CONTINUE ';'
   40          | fld_stmt
   41          | error ';'

   42 list_stmt: LISTA NAME TEXT ';'
   43          | LISTA NAME '[' expression ']' TEXT ';'
   44          | LISTA NAME '[' expression ',' expression ']' TEXT ';'

   45 if_stmt: IF '(' expression ')' statement
   46        | IF '(' expression ')' statement ELSE statement

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

   48 compound_stmt: open_curly statement_list '}'

   49 open_curly: '{'

   50 expr_list: expression
   51          | expr_list ',' expression

   52 expression: expression '+' expression
   53           | expression '-' expression
   54           | expression '*' expression
   55           | expression '/' expression
   56           | expression '%' expression
   57           | '-' expression
   58           | expression '<' expression
   59           | expression '>' expression
   60           | expression LEQ expression
   61           | expression GEQ expression
   62           | expression ISEQ expression
   63           | expression NOEQ expression
   64           | expression LOGOR expression
   65           | expression LOGAND expression
   66           | expression '=' expression
   67           | NOT expression
   68           | INUMBER
   69           | FNUMBER
   70           | NAME
   71           | NAME '[' expression ']'
   72           | NAME '[' expression ',' expression ']'
   73           | NAME '(' expr_list ')'
   74           | TEXT
   75           | '(' expression ')'
   76           | NAME IN NAME

   77 range_list: range
   78           | range_list ',' range

   79 range: INUMBER '-' INUMBER
   80      | INUMBER

   81 tab_list: tab_defn
   82         | tab_list tab_defn

   83 tab_defn: TAB NAME NAME ';'
   84         | TAB NAME NAME ';' COND_START expression ';'
   85         | error ';'

   86 ax_list: ax_defn
   87        | ax_list ax_defn

   88 ax_defn: AX NAME ';' ax_stmt_list
   89        | AX NAME ';' COND_START expression ';' ax_stmt_list
   90        | error ';'

   91 ax_stmt_list: ax_stmt
   92             | ax_stmt_list ax_stmt

   93 ax_stmt: TOT ';' TEXT ';'
   94        | TOT ';' TEXT ';' COND_START expression ';'
   95        | CNT ';' TEXT ';' COND_START expression ';'
   96        | TTL ';' TEXT ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 56
'&' (38) 27
'(' (40) 16 22 32 45 46 47 73 75
')' (41) 16 22 32 45 46 47 73 75
'*' (42) 54
'+' (43) 52
',' (44) 24 44 47 51 72 78
'-' (45) 53 57 79
'/' (47) 55
':' (58) 47
';' (59) 2 17 18 19 20 22 32 34 38 39 41 42 43 44 47 83 84 85 88 89
    90 93 94 95 96
'<' (60) 58
'=' (61) 2 18 20 47 66
'>' (62) 59
'[' (91) 19 26 43 44 71 72
']' (93) 19 26 43 44 71 72
'{' (123) 3 4 49
'}' (125) 3 4 48
error (256) 41 85 90
CONVERT (258)
TOT (259) 93 94
AX (260) 88 89
CNT (261) 95
TTL (262) 96
FOR (263) 32
FLD (264) 47
TEXT (265) 42 43 44 74 93 94 95 96
NAME (266) 16 17 18 19 20 22 25 26 27 42 43 44 47 70 71 72 73 76 83
    84 88 89
DEFINELIST (267) 20
FNUMBER (268) 69
INUMBER (269) 2 19 26 47 68 79 80
CODELIST (270)
LISTA (271) 42 43 44
IF (272) 45 46
ELSE (273) 46
IN (274) 76
VOID_T (275) 9
INT8_T (276) 10
INT16_T (277) 11
INT32_T (278) 12
FLOAT_T (279) 13
DOUBLE_T (280) 14
AXSTART (281) 3
TABSTART (282) 4
ED_START (283) 2
DATA_STRUCT (284) 2
REC_LEN (285) 2
ED_END (286) 2
TAB (287) 83 84
COND_START (288) 84 89 94 95
CONTINUE (289) 39
BREAK (290) 38
LOGOR (291) 64
LOGAND (292) 65
NOEQ (293) 63
ISEQ (294) 62
GEQ (295) 61
LEQ (296) 60
NOT (297) 67
UMINUS (298)
FUNC_CALL (299)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
prog (64)
    on left: 2 3 4, on right: 0
@1 (65)
    on left: 1, on right: 2
top_level_item_list (66)
    on left: 5 6, on right: 2 6
top_level_item (67)
    on left: 7 8, on right: 5 6
xtcc_type (68)
    on left: 9 10 11 12 13 14, on right: 16 17 18 19 22 25 26 27
func_defn (69)
    on left: 16, on right: 8
@2 (70)
    on left: 15, on right: 16
decl (71)
    on left: 17 18 19 20 21, on right: 7 36
func_decl (72)
    on left: 22, on right: 21
decl_comma_list (73)
    on left: 23 24, on right: 16 22 24
var_decl (74)
    on left: 25 26 27 28, on right: 23 24
statement_list (75)
    on left: 29 30, on right: 30 48
statement (76)
    on left: 32 33 34 35 36 37 38 39 40 41, on right: 29 30 32 45 46
@3 (77)
    on left: 31, on right: 32
list_stmt (78)
    on left: 42 43 44, on right: 37
if_stmt (79)
    on left: 45 46, on right: 33
fld_stmt (80)
    on left: 47, on right: 40
compound_stmt (81)
    on left: 48, on right: 16 35
open_curly (82)
    on left: 49, on right: 48
expr_list (83)
    on left: 50 51, on right: 51 73
expression (84)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73 74 75 76, on right: 18 32 34 43 44 45 46 47 50 51 52
    53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 71 72 75 84 89 94
    95
range_list (85)
    on left: 77 78, on right: 20 78
range (86)
    on left: 79 80, on right: 77 78
tab_list (87)
    on left: 81 82, on right: 4 82
tab_defn (88)
    on left: 83 84 85, on right: 81 82
ax_list (89)
    on left: 86 87, on right: 3 87
ax_defn (90)
    on left: 88 89 90, on right: 86 87
ax_stmt_list (91)
    on left: 91 92, on right: 88 89 92
ax_stmt (92)
    on left: 93 94 95 96, on right: 91 92


state 0

    0 $accept: . prog $end

    AXSTART      shift, and go to state 1
    TABSTART     shift, and go to state 2
    DATA_STRUCT  shift, and go to state 3

    prog  go to state 4


state 1

    3 prog: AXSTART . '{' ax_list '}'

    '{'  shift, and go to state 5


state 2

    4 prog: TABSTART . '{' tab_list '}'

    '{'  shift, and go to state 6


state 3

    2 prog: DATA_STRUCT . ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    ';'  shift, and go to state 7


state 4

    0 $accept: prog . $end

    $end  shift, and go to state 8


state 5

    3 prog: AXSTART '{' . ax_list '}'

    error  shift, and go to state 9
    AX     shift, and go to state 10

    ax_list  go to state 11
    ax_defn  go to state 12


state 6

    4 prog: TABSTART '{' . tab_list '}'

    error  shift, and go to state 13
    TAB    shift, and go to state 14

    tab_list  go to state 15
    tab_defn  go to state 16


state 7

    2 prog: DATA_STRUCT ';' . REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    REC_LEN  shift, and go to state 17


state 8

    0 $accept: prog $end .

    $default  accept


state 9

   90 ax_defn: error . ';'

    ';'  shift, and go to state 18


state 10

   88 ax_defn: AX . NAME ';' ax_stmt_list
   89        | AX . NAME ';' COND_START expression ';' ax_stmt_list

    NAME  shift, and go to state 19


state 11

    3 prog: AXSTART '{' ax_list . '}'
   87 ax_list: ax_list . ax_defn

    error  shift, and go to state 9
    AX     shift, and go to state 10
    '}'    shift, and go to state 20

    ax_defn  go to state 21


state 12

   86 ax_list: ax_defn .

    $default  reduce using rule 86 (ax_list)


state 13

   85 tab_defn: error . ';'

    ';'  shift, and go to state 22


state 14

   83 tab_defn: TAB . NAME NAME ';'
   84         | TAB . NAME NAME ';' COND_START expression ';'

    NAME  shift, and go to state 23


state 15

    4 prog: TABSTART '{' tab_list . '}'
   82 tab_list: tab_list . tab_defn

    error  shift, and go to state 13
    '}'    shift, and go to state 24
    TAB    shift, and go to state 14

    tab_defn  go to state 25


state 16

   81 tab_list: tab_defn .

    $default  reduce using rule 81 (tab_list)


state 17

    2 prog: DATA_STRUCT ';' REC_LEN . '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    '='  shift, and go to state 26


state 18

   90 ax_defn: error ';' .

    $default  reduce using rule 90 (ax_defn)


state 19

   88 ax_defn: AX NAME . ';' ax_stmt_list
   89        | AX NAME . ';' COND_START expression ';' ax_stmt_list

    ';'  shift, and go to state 27


state 20

    3 prog: AXSTART '{' ax_list '}' .

    $default  reduce using rule 3 (prog)


state 21

   87 ax_list: ax_list ax_defn .

    $default  reduce using rule 87 (ax_list)


state 22

   85 tab_defn: error ';' .

    $default  reduce using rule 85 (tab_defn)


state 23

   83 tab_defn: TAB NAME . NAME ';'
   84         | TAB NAME . NAME ';' COND_START expression ';'

    NAME  shift, and go to state 28


state 24

    4 prog: TABSTART '{' tab_list '}' .

    $default  reduce using rule 4 (prog)


state 25

   82 tab_list: tab_list tab_defn .

    $default  reduce using rule 82 (tab_list)


state 26

    2 prog: DATA_STRUCT ';' REC_LEN '=' . INUMBER ';' @1 ED_START top_level_item_list ED_END

    INUMBER  shift, and go to state 29


state 27

   88 ax_defn: AX NAME ';' . ax_stmt_list
   89        | AX NAME ';' . COND_START expression ';' ax_stmt_list

    TOT         shift, and go to state 30
    CNT         shift, and go to state 31
    TTL         shift, and go to state 32
    COND_START  shift, and go to state 33

    ax_stmt_list  go to state 34
    ax_stmt       go to state 35


state 28

   83 tab_defn: TAB NAME NAME . ';'
   84         | TAB NAME NAME . ';' COND_START expression ';'

    ';'  shift, and go to state 36


state 29

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER . ';' @1 ED_START top_level_item_list ED_END

    ';'  shift, and go to state 37


state 30

   93 ax_stmt: TOT . ';' TEXT ';'
   94        | TOT . ';' TEXT ';' COND_START expression ';'

    ';'  shift, and go to state 38


state 31

   95 ax_stmt: CNT . ';' TEXT ';' COND_START expression ';'

    ';'  shift, and go to state 39


state 32

   96 ax_stmt: TTL . ';' TEXT ';'

    ';'  shift, and go to state 40


state 33

   89 ax_defn: AX NAME ';' COND_START . expression ';' ax_stmt_list

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 48


state 34

   88 ax_defn: AX NAME ';' ax_stmt_list .
   92 ax_stmt_list: ax_stmt_list . ax_stmt

    TOT  shift, and go to state 30
    CNT  shift, and go to state 31
    TTL  shift, and go to state 32

    $default  reduce using rule 88 (ax_defn)

    ax_stmt  go to state 49


state 35

   91 ax_stmt_list: ax_stmt .

    $default  reduce using rule 91 (ax_stmt_list)


state 36

   83 tab_defn: TAB NAME NAME ';' .
   84         | TAB NAME NAME ';' . COND_START expression ';'

    COND_START  shift, and go to state 50

    $default  reduce using rule 83 (tab_defn)


state 37

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' . @1 ED_START top_level_item_list ED_END

    $default  reduce using rule 1 (@1)

    @1  go to state 51


state 38

   93 ax_stmt: TOT ';' . TEXT ';'
   94        | TOT ';' . TEXT ';' COND_START expression ';'

    TEXT  shift, and go to state 52


state 39

   95 ax_stmt: CNT ';' . TEXT ';' COND_START expression ';'

    TEXT  shift, and go to state 53


state 40

   96 ax_stmt: TTL ';' . TEXT ';'

    TEXT  shift, and go to state 54


state 41

   74 expression: TEXT .

    $default  reduce using rule 74 (expression)


state 42

   70 expression: NAME .
   71           | NAME . '[' expression ']'
   72           | NAME . '[' expression ',' expression ']'
   73           | NAME . '(' expr_list ')'
   76           | NAME . IN NAME

    IN   shift, and go to state 55
    '['  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 70 (expression)


state 43

   69 expression: FNUMBER .

    $default  reduce using rule 69 (expression)


state 44

   68 expression: INUMBER .

    $default  reduce using rule 68 (expression)


state 45

   75 expression: '(' . expression ')'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 58


state 46

   57 expression: '-' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 59


state 47

   67 expression: NOT . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 60


state 48

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   89 ax_defn: AX NAME ';' COND_START expression . ';' ax_stmt_list

    ';'     shift, and go to state 61
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 49

   92 ax_stmt_list: ax_stmt_list ax_stmt .

    $default  reduce using rule 92 (ax_stmt_list)


state 50

   84 tab_defn: TAB NAME NAME ';' COND_START . expression ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 76


state 51

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 . ED_START top_level_item_list ED_END

    ED_START  shift, and go to state 77


state 52

   93 ax_stmt: TOT ';' TEXT . ';'
   94        | TOT ';' TEXT . ';' COND_START expression ';'

    ';'  shift, and go to state 78


state 53

   95 ax_stmt: CNT ';' TEXT . ';' COND_START expression ';'

    ';'  shift, and go to state 79


state 54

   96 ax_stmt: TTL ';' TEXT . ';'

    ';'  shift, and go to state 80


state 55

   76 expression: NAME IN . NAME

    NAME  shift, and go to state 81


state 56

   71 expression: NAME '[' . expression ']'
   72           | NAME '[' . expression ',' expression ']'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 82


state 57

   73 expression: NAME '(' . expr_list ')'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expr_list   go to state 83
    expression  go to state 84


state 58

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   75           | '(' expression . ')'

    ')'     shift, and go to state 85
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 59

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   57           | '-' expression .
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 57 (expression)


state 60

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   67           | NOT expression .

    $default  reduce using rule 67 (expression)


state 61

   89 ax_defn: AX NAME ';' COND_START expression ';' . ax_stmt_list

    TOT  shift, and go to state 30
    CNT  shift, and go to state 31
    TTL  shift, and go to state 32

    ax_stmt_list  go to state 86
    ax_stmt       go to state 35


state 62

   66 expression: expression '=' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 87


state 63

   64 expression: expression LOGOR . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 88


state 64

   65 expression: expression LOGAND . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 89


state 65

   63 expression: expression NOEQ . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 90


state 66

   62 expression: expression ISEQ . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 91


state 67

   58 expression: expression '<' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 92


state 68

   59 expression: expression '>' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 93


state 69

   61 expression: expression GEQ . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 94


state 70

   60 expression: expression LEQ . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 95


state 71

   53 expression: expression '-' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 96


state 72

   52 expression: expression '+' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 97


state 73

   54 expression: expression '*' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 98


state 74

   55 expression: expression '/' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 99


state 75

   56 expression: expression '%' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 100


state 76

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   84 tab_defn: TAB NAME NAME ';' COND_START expression . ';'

    ';'     shift, and go to state 101
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 77

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START . top_level_item_list ED_END

    DEFINELIST  shift, and go to state 102
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108

    top_level_item_list  go to state 109
    top_level_item       go to state 110
    xtcc_type            go to state 111
    func_defn            go to state 112
    decl                 go to state 113
    func_decl            go to state 114


state 78

   93 ax_stmt: TOT ';' TEXT ';' .
   94        | TOT ';' TEXT ';' . COND_START expression ';'

    COND_START  shift, and go to state 115

    $default  reduce using rule 93 (ax_stmt)


state 79

   95 ax_stmt: CNT ';' TEXT ';' . COND_START expression ';'

    COND_START  shift, and go to state 116


state 80

   96 ax_stmt: TTL ';' TEXT ';' .

    $default  reduce using rule 96 (ax_stmt)


state 81

   76 expression: NAME IN NAME .

    $default  reduce using rule 76 (expression)


state 82

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   71           | NAME '[' expression . ']'
   72           | NAME '[' expression . ',' expression ']'

    ']'     shift, and go to state 117
    '='     shift, and go to state 62
    ','     shift, and go to state 118
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 83

   51 expr_list: expr_list . ',' expression
   73 expression: NAME '(' expr_list . ')'

    ')'  shift, and go to state 119
    ','  shift, and go to state 120


state 84

   50 expr_list: expression .
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 50 (expr_list)


state 85

   75 expression: '(' expression ')' .

    $default  reduce using rule 75 (expression)


state 86

   89 ax_defn: AX NAME ';' COND_START expression ';' ax_stmt_list .
   92 ax_stmt_list: ax_stmt_list . ax_stmt

    TOT  shift, and go to state 30
    CNT  shift, and go to state 31
    TTL  shift, and go to state 32

    $default  reduce using rule 89 (ax_defn)

    ax_stmt  go to state 49


state 87

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   66           | expression '=' expression .

    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 66 (expression)


state 88

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   64           | expression LOGOR expression .
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 64 (expression)


state 89

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   65           | expression LOGAND expression .
   66           | expression . '=' expression

    NOEQ  shift, and go to state 65
    ISEQ  shift, and go to state 66
    '<'   shift, and go to state 67
    '>'   shift, and go to state 68
    GEQ   shift, and go to state 69
    LEQ   shift, and go to state 70
    '-'   shift, and go to state 71
    '+'   shift, and go to state 72
    '*'   shift, and go to state 73
    '/'   shift, and go to state 74
    '%'   shift, and go to state 75

    $default  reduce using rule 65 (expression)


state 90

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   63           | expression NOEQ expression .
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '<'  shift, and go to state 67
    '>'  shift, and go to state 68
    GEQ  shift, and go to state 69
    LEQ  shift, and go to state 70
    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 63 (expression)


state 91

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   62           | expression ISEQ expression .
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '<'  shift, and go to state 67
    '>'  shift, and go to state 68
    GEQ  shift, and go to state 69
    LEQ  shift, and go to state 70
    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 62 (expression)


state 92

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   58           | expression '<' expression .
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 58 (expression)


state 93

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   59           | expression '>' expression .
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 59 (expression)


state 94

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   61           | expression GEQ expression .
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 61 (expression)


state 95

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   60           | expression LEQ expression .
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 60 (expression)


state 96

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   53           | expression '-' expression .
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 53 (expression)


state 97

   52 expression: expression . '+' expression
   52           | expression '+' expression .
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 52 (expression)


state 98

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   54           | expression '*' expression .
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 54 (expression)


state 99

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   55           | expression '/' expression .
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 55 (expression)


state 100

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   56           | expression '%' expression .
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 56 (expression)


state 101

   84 tab_defn: TAB NAME NAME ';' COND_START expression ';' .

    $default  reduce using rule 84 (tab_defn)


state 102

   20 decl: DEFINELIST . NAME '=' range_list ';'

    NAME  shift, and go to state 121


state 103

    9 xtcc_type: VOID_T .

    $default  reduce using rule 9 (xtcc_type)


state 104

   10 xtcc_type: INT8_T .

    $default  reduce using rule 10 (xtcc_type)


state 105

   11 xtcc_type: INT16_T .

    $default  reduce using rule 11 (xtcc_type)


state 106

   12 xtcc_type: INT32_T .

    $default  reduce using rule 12 (xtcc_type)


state 107

   13 xtcc_type: FLOAT_T .

    $default  reduce using rule 13 (xtcc_type)


state 108

   14 xtcc_type: DOUBLE_T .

    $default  reduce using rule 14 (xtcc_type)


state 109

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list . ED_END
    6 top_level_item_list: top_level_item_list . top_level_item

    DEFINELIST  shift, and go to state 102
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108
    ED_END      shift, and go to state 122

    top_level_item  go to state 123
    xtcc_type       go to state 111
    func_defn       go to state 112
    decl            go to state 113
    func_decl       go to state 114


state 110

    5 top_level_item_list: top_level_item .

    $default  reduce using rule 5 (top_level_item_list)


state 111

   16 func_defn: xtcc_type . NAME '(' decl_comma_list ')' @2 compound_stmt
   17 decl: xtcc_type . NAME ';'
   18     | xtcc_type . NAME '=' expression ';'
   19     | xtcc_type . NAME '[' INUMBER ']' ';'
   22 func_decl: xtcc_type . NAME '(' decl_comma_list ')' ';'

    NAME  shift, and go to state 124


state 112

    8 top_level_item: func_defn .

    $default  reduce using rule 8 (top_level_item)


state 113

    7 top_level_item: decl .

    $default  reduce using rule 7 (top_level_item)


state 114

   21 decl: func_decl .

    $default  reduce using rule 21 (decl)


state 115

   94 ax_stmt: TOT ';' TEXT ';' COND_START . expression ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 125


state 116

   95 ax_stmt: CNT ';' TEXT ';' COND_START . expression ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 126


state 117

   71 expression: NAME '[' expression ']' .

    $default  reduce using rule 71 (expression)


state 118

   72 expression: NAME '[' expression ',' . expression ']'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 127


state 119

   73 expression: NAME '(' expr_list ')' .

    $default  reduce using rule 73 (expression)


state 120

   51 expr_list: expr_list ',' . expression

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 128


state 121

   20 decl: DEFINELIST NAME . '=' range_list ';'

    '='  shift, and go to state 129


state 122

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END .

    $default  reduce using rule 2 (prog)


state 123

    6 top_level_item_list: top_level_item_list top_level_item .

    $default  reduce using rule 6 (top_level_item_list)


state 124

   16 func_defn: xtcc_type NAME . '(' decl_comma_list ')' @2 compound_stmt
   17 decl: xtcc_type NAME . ';'
   18     | xtcc_type NAME . '=' expression ';'
   19     | xtcc_type NAME . '[' INUMBER ']' ';'
   22 func_decl: xtcc_type NAME . '(' decl_comma_list ')' ';'

    ';'  shift, and go to state 130
    '['  shift, and go to state 131
    '('  shift, and go to state 132
    '='  shift, and go to state 133


state 125

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   94 ax_stmt: TOT ';' TEXT ';' COND_START expression . ';'

    ';'     shift, and go to state 134
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 126

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   95 ax_stmt: CNT ';' TEXT ';' COND_START expression . ';'

    ';'     shift, and go to state 135
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 127

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   72           | NAME '[' expression ',' expression . ']'

    ']'     shift, and go to state 136
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 128

   51 expr_list: expr_list ',' expression .
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 51 (expr_list)


state 129

   20 decl: DEFINELIST NAME '=' . range_list ';'

    INUMBER  shift, and go to state 137

    range_list  go to state 138
    range       go to state 139


state 130

   17 decl: xtcc_type NAME ';' .

    $default  reduce using rule 17 (decl)


state 131

   19 decl: xtcc_type NAME '[' . INUMBER ']' ';'

    INUMBER  shift, and go to state 140


state 132

   16 func_defn: xtcc_type NAME '(' . decl_comma_list ')' @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' . decl_comma_list ')' ';'

    VOID_T    shift, and go to state 103
    INT8_T    shift, and go to state 104
    INT16_T   shift, and go to state 105
    INT32_T   shift, and go to state 106
    FLOAT_T   shift, and go to state 107
    DOUBLE_T  shift, and go to state 108

    $default  reduce using rule 28 (var_decl)

    xtcc_type        go to state 141
    decl_comma_list  go to state 142
    var_decl         go to state 143


state 133

   18 decl: xtcc_type NAME '=' . expression ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 144


state 134

   94 ax_stmt: TOT ';' TEXT ';' COND_START expression ';' .

    $default  reduce using rule 94 (ax_stmt)


state 135

   95 ax_stmt: CNT ';' TEXT ';' COND_START expression ';' .

    $default  reduce using rule 95 (ax_stmt)


state 136

   72 expression: NAME '[' expression ',' expression ']' .

    $default  reduce using rule 72 (expression)


state 137

   79 range: INUMBER . '-' INUMBER
   80      | INUMBER .

    '-'  shift, and go to state 145

    $default  reduce using rule 80 (range)


state 138

   20 decl: DEFINELIST NAME '=' range_list . ';'
   78 range_list: range_list . ',' range

    ';'  shift, and go to state 146
    ','  shift, and go to state 147


state 139

   77 range_list: range .

    $default  reduce using rule 77 (range_list)


state 140

   19 decl: xtcc_type NAME '[' INUMBER . ']' ';'

    ']'  shift, and go to state 148


state 141

   25 var_decl: xtcc_type . NAME
   26         | xtcc_type . NAME '[' INUMBER ']'
   27         | xtcc_type . '&' NAME

    NAME  shift, and go to state 149
    '&'   shift, and go to state 150


state 142

   16 func_defn: xtcc_type NAME '(' decl_comma_list . ')' @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' decl_comma_list . ')' ';'
   24 decl_comma_list: decl_comma_list . ',' var_decl

    ')'  shift, and go to state 151
    ','  shift, and go to state 152


state 143

   23 decl_comma_list: var_decl .

    $default  reduce using rule 23 (decl_comma_list)


state 144

   18 decl: xtcc_type NAME '=' expression . ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 153
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 145

   79 range: INUMBER '-' . INUMBER

    INUMBER  shift, and go to state 154


state 146

   20 decl: DEFINELIST NAME '=' range_list ';' .

    $default  reduce using rule 20 (decl)


state 147

   78 range_list: range_list ',' . range

    INUMBER  shift, and go to state 137

    range  go to state 155


state 148

   19 decl: xtcc_type NAME '[' INUMBER ']' . ';'

    ';'  shift, and go to state 156


state 149

   25 var_decl: xtcc_type NAME .
   26         | xtcc_type NAME . '[' INUMBER ']'

    '['  shift, and go to state 157

    $default  reduce using rule 25 (var_decl)


state 150

   27 var_decl: xtcc_type '&' . NAME

    NAME  shift, and go to state 158


state 151

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' . @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' . ';'

    ';'  shift, and go to state 159

    $default  reduce using rule 15 (@2)

    @2  go to state 160


state 152

   24 decl_comma_list: decl_comma_list ',' . var_decl

    VOID_T    shift, and go to state 103
    INT8_T    shift, and go to state 104
    INT16_T   shift, and go to state 105
    INT32_T   shift, and go to state 106
    FLOAT_T   shift, and go to state 107
    DOUBLE_T  shift, and go to state 108

    $default  reduce using rule 28 (var_decl)

    xtcc_type  go to state 141
    var_decl   go to state 161


state 153

   18 decl: xtcc_type NAME '=' expression ';' .

    $default  reduce using rule 18 (decl)


state 154

   79 range: INUMBER '-' INUMBER .

    $default  reduce using rule 79 (range)


state 155

   78 range_list: range_list ',' range .

    $default  reduce using rule 78 (range_list)


state 156

   19 decl: xtcc_type NAME '[' INUMBER ']' ';' .

    $default  reduce using rule 19 (decl)


state 157

   26 var_decl: xtcc_type NAME '[' . INUMBER ']'

    INUMBER  shift, and go to state 162


state 158

   27 var_decl: xtcc_type '&' NAME .

    $default  reduce using rule 27 (var_decl)


state 159

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' ';' .

    $default  reduce using rule 22 (func_decl)


state 160

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 . compound_stmt

    '{'  shift, and go to state 163

    compound_stmt  go to state 164
    open_curly     go to state 165


state 161

   24 decl_comma_list: decl_comma_list ',' var_decl .

    $default  reduce using rule 24 (decl_comma_list)


state 162

   26 var_decl: xtcc_type NAME '[' INUMBER . ']'

    ']'  shift, and go to state 166


state 163

   49 open_curly: '{' .

    $default  reduce using rule 49 (open_curly)


state 164

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 compound_stmt .

    $default  reduce using rule 16 (func_defn)


state 165

   48 compound_stmt: open_curly . statement_list '}'

    error       shift, and go to state 167
    '{'         shift, and go to state 163
    FOR         shift, and go to state 168
    FLD         shift, and go to state 169
    TEXT        shift, and go to state 41
    NAME        shift, and go to state 42
    DEFINELIST  shift, and go to state 102
    FNUMBER     shift, and go to state 43
    INUMBER     shift, and go to state 44
    LISTA       shift, and go to state 170
    IF          shift, and go to state 171
    '('         shift, and go to state 45
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108
    CONTINUE    shift, and go to state 172
    BREAK       shift, and go to state 173
    '-'         shift, and go to state 46
    NOT         shift, and go to state 47

    xtcc_type       go to state 174
    decl            go to state 175
    func_decl       go to state 114
    statement_list  go to state 176
    statement       go to state 177
    list_stmt       go to state 178
    if_stmt         go to state 179
    fld_stmt        go to state 180
    compound_stmt   go to state 181
    open_curly      go to state 165
    expression      go to state 182


state 166

   26 var_decl: xtcc_type NAME '[' INUMBER ']' .

    $default  reduce using rule 26 (var_decl)


state 167

   41 statement: error . ';'

    ';'  shift, and go to state 183


state 168

   32 statement: FOR . '(' expression ';' expression ';' expression ')' @3 statement

    '('  shift, and go to state 184


state 169

   47 fld_stmt: FLD . NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

    NAME  shift, and go to state 185


state 170

   42 list_stmt: LISTA . NAME TEXT ';'
   43          | LISTA . NAME '[' expression ']' TEXT ';'
   44          | LISTA . NAME '[' expression ',' expression ']' TEXT ';'

    NAME  shift, and go to state 186


state 171

   45 if_stmt: IF . '(' expression ')' statement
   46        | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 187


state 172

   39 statement: CONTINUE . ';'

    ';'  shift, and go to state 188


state 173

   38 statement: BREAK . ';'

    ';'  shift, and go to state 189


state 174

   17 decl: xtcc_type . NAME ';'
   18     | xtcc_type . NAME '=' expression ';'
   19     | xtcc_type . NAME '[' INUMBER ']' ';'
   22 func_decl: xtcc_type . NAME '(' decl_comma_list ')' ';'

    NAME  shift, and go to state 190


state 175

   36 statement: decl .

    $default  reduce using rule 36 (statement)


state 176

   30 statement_list: statement_list . statement
   48 compound_stmt: open_curly statement_list . '}'

    error       shift, and go to state 167
    '{'         shift, and go to state 163
    '}'         shift, and go to state 191
    FOR         shift, and go to state 168
    FLD         shift, and go to state 169
    TEXT        shift, and go to state 41
    NAME        shift, and go to state 42
    DEFINELIST  shift, and go to state 102
    FNUMBER     shift, and go to state 43
    INUMBER     shift, and go to state 44
    LISTA       shift, and go to state 170
    IF          shift, and go to state 171
    '('         shift, and go to state 45
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108
    CONTINUE    shift, and go to state 172
    BREAK       shift, and go to state 173
    '-'         shift, and go to state 46
    NOT         shift, and go to state 47

    xtcc_type      go to state 174
    decl           go to state 175
    func_decl      go to state 114
    statement      go to state 192
    list_stmt      go to state 178
    if_stmt        go to state 179
    fld_stmt       go to state 180
    compound_stmt  go to state 181
    open_curly     go to state 165
    expression     go to state 182


state 177

   29 statement_list: statement .

    $default  reduce using rule 29 (statement_list)


state 178

   37 statement: list_stmt .

    $default  reduce using rule 37 (statement)


state 179

   33 statement: if_stmt .

    $default  reduce using rule 33 (statement)


state 180

   40 statement: fld_stmt .

    $default  reduce using rule 40 (statement)


state 181

   35 statement: compound_stmt .

    $default  reduce using rule 35 (statement)


state 182

   34 statement: expression . ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 193
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 183

   41 statement: error ';' .

    $default  reduce using rule 41 (statement)


state 184

   32 statement: FOR '(' . expression ';' expression ';' expression ')' @3 statement

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 194


state 185

   47 fld_stmt: FLD NAME . '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

    '='  shift, and go to state 195


state 186

   42 list_stmt: LISTA NAME . TEXT ';'
   43          | LISTA NAME . '[' expression ']' TEXT ';'
   44          | LISTA NAME . '[' expression ',' expression ']' TEXT ';'

    TEXT  shift, and go to state 196
    '['   shift, and go to state 197


state 187

   45 if_stmt: IF '(' . expression ')' statement
   46        | IF '(' . expression ')' statement ELSE statement

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 198


state 188

   39 statement: CONTINUE ';' .

    $default  reduce using rule 39 (statement)


state 189

   38 statement: BREAK ';' .

    $default  reduce using rule 38 (statement)


state 190

   17 decl: xtcc_type NAME . ';'
   18     | xtcc_type NAME . '=' expression ';'
   19     | xtcc_type NAME . '[' INUMBER ']' ';'
   22 func_decl: xtcc_type NAME . '(' decl_comma_list ')' ';'

    ';'  shift, and go to state 130
    '['  shift, and go to state 131
    '('  shift, and go to state 199
    '='  shift, and go to state 133


state 191

   48 compound_stmt: open_curly statement_list '}' .

    $default  reduce using rule 48 (compound_stmt)


state 192

   30 statement_list: statement_list statement .

    $default  reduce using rule 30 (statement_list)


state 193

   34 statement: expression ';' .

    $default  reduce using rule 34 (statement)


state 194

   32 statement: FOR '(' expression . ';' expression ';' expression ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 200
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 195

   47 fld_stmt: FLD NAME '=' . NAME '(' expression ',' expression ')' ':' INUMBER ';'

    NAME  shift, and go to state 201


state 196

   42 list_stmt: LISTA NAME TEXT . ';'

    ';'  shift, and go to state 202


state 197

   43 list_stmt: LISTA NAME '[' . expression ']' TEXT ';'
   44          | LISTA NAME '[' . expression ',' expression ']' TEXT ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 203


state 198

   45 if_stmt: IF '(' expression . ')' statement
   46        | IF '(' expression . ')' statement ELSE statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 204
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 199

   22 func_decl: xtcc_type NAME '(' . decl_comma_list ')' ';'

    VOID_T    shift, and go to state 103
    INT8_T    shift, and go to state 104
    INT16_T   shift, and go to state 105
    INT32_T   shift, and go to state 106
    FLOAT_T   shift, and go to state 107
    DOUBLE_T  shift, and go to state 108

    $default  reduce using rule 28 (var_decl)

    xtcc_type        go to state 141
    decl_comma_list  go to state 205
    var_decl         go to state 143


state 200

   32 statement: FOR '(' expression ';' . expression ';' expression ')' @3 statement

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 206


state 201

   47 fld_stmt: FLD NAME '=' NAME . '(' expression ',' expression ')' ':' INUMBER ';'

    '('  shift, and go to state 207


state 202

   42 list_stmt: LISTA NAME TEXT ';' .

    $default  reduce using rule 42 (list_stmt)


state 203

   43 list_stmt: LISTA NAME '[' expression . ']' TEXT ';'
   44          | LISTA NAME '[' expression . ',' expression ']' TEXT ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ']'     shift, and go to state 208
    '='     shift, and go to state 62
    ','     shift, and go to state 209
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 204

   45 if_stmt: IF '(' expression ')' . statement
   46        | IF '(' expression ')' . statement ELSE statement

    error       shift, and go to state 167
    '{'         shift, and go to state 163
    FOR         shift, and go to state 168
    FLD         shift, and go to state 169
    TEXT        shift, and go to state 41
    NAME        shift, and go to state 42
    DEFINELIST  shift, and go to state 102
    FNUMBER     shift, and go to state 43
    INUMBER     shift, and go to state 44
    LISTA       shift, and go to state 170
    IF          shift, and go to state 171
    '('         shift, and go to state 45
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108
    CONTINUE    shift, and go to state 172
    BREAK       shift, and go to state 173
    '-'         shift, and go to state 46
    NOT         shift, and go to state 47

    xtcc_type      go to state 174
    decl           go to state 175
    func_decl      go to state 114
    statement      go to state 210
    list_stmt      go to state 178
    if_stmt        go to state 179
    fld_stmt       go to state 180
    compound_stmt  go to state 181
    open_curly     go to state 165
    expression     go to state 182


state 205

   22 func_decl: xtcc_type NAME '(' decl_comma_list . ')' ';'
   24 decl_comma_list: decl_comma_list . ',' var_decl

    ')'  shift, and go to state 211
    ','  shift, and go to state 152


state 206

   32 statement: FOR '(' expression ';' expression . ';' expression ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 212
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 207

   47 fld_stmt: FLD NAME '=' NAME '(' . expression ',' expression ')' ':' INUMBER ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 213


state 208

   43 list_stmt: LISTA NAME '[' expression ']' . TEXT ';'

    TEXT  shift, and go to state 214


state 209

   44 list_stmt: LISTA NAME '[' expression ',' . expression ']' TEXT ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 215


state 210

   45 if_stmt: IF '(' expression ')' statement .
   46        | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 216

    ELSE      [reduce using rule 45 (if_stmt)]
    $default  reduce using rule 45 (if_stmt)


state 211

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' . ';'

    ';'  shift, and go to state 159


state 212

   32 statement: FOR '(' expression ';' expression ';' . expression ')' @3 statement

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 217


state 213

   47 fld_stmt: FLD NAME '=' NAME '(' expression . ',' expression ')' ':' INUMBER ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 62
    ','     shift, and go to state 218
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 214

   43 list_stmt: LISTA NAME '[' expression ']' TEXT . ';'

    ';'  shift, and go to state 219


state 215

   44 list_stmt: LISTA NAME '[' expression ',' expression . ']' TEXT ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ']'     shift, and go to state 220
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 216

   46 if_stmt: IF '(' expression ')' statement ELSE . statement

    error       shift, and go to state 167
    '{'         shift, and go to state 163
    FOR         shift, and go to state 168
    FLD         shift, and go to state 169
    TEXT        shift, and go to state 41
    NAME        shift, and go to state 42
    DEFINELIST  shift, and go to state 102
    FNUMBER     shift, and go to state 43
    INUMBER     shift, and go to state 44
    LISTA       shift, and go to state 170
    IF          shift, and go to state 171
    '('         shift, and go to state 45
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108
    CONTINUE    shift, and go to state 172
    BREAK       shift, and go to state 173
    '-'         shift, and go to state 46
    NOT         shift, and go to state 47

    xtcc_type      go to state 174
    decl           go to state 175
    func_decl      go to state 114
    statement      go to state 221
    list_stmt      go to state 178
    if_stmt        go to state 179
    fld_stmt       go to state 180
    compound_stmt  go to state 181
    open_curly     go to state 165
    expression     go to state 182


state 217

   32 statement: FOR '(' expression ';' expression ';' expression . ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 222
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 218

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' . expression ')' ':' INUMBER ';'

    TEXT     shift, and go to state 41
    NAME     shift, and go to state 42
    FNUMBER  shift, and go to state 43
    INUMBER  shift, and go to state 44
    '('      shift, and go to state 45
    '-'      shift, and go to state 46
    NOT      shift, and go to state 47

    expression  go to state 223


state 219

   43 list_stmt: LISTA NAME '[' expression ']' TEXT ';' .

    $default  reduce using rule 43 (list_stmt)


state 220

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' . TEXT ';'

    TEXT  shift, and go to state 224


state 221

   46 if_stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 46 (if_stmt)


state 222

   32 statement: FOR '(' expression ';' expression ';' expression ')' . @3 statement

    $default  reduce using rule 31 (@3)

    @3  go to state 225


state 223

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression . ')' ':' INUMBER ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 226
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 224

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' TEXT . ';'

    ';'  shift, and go to state 227


state 225

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 . statement

    error       shift, and go to state 167
    '{'         shift, and go to state 163
    FOR         shift, and go to state 168
    FLD         shift, and go to state 169
    TEXT        shift, and go to state 41
    NAME        shift, and go to state 42
    DEFINELIST  shift, and go to state 102
    FNUMBER     shift, and go to state 43
    INUMBER     shift, and go to state 44
    LISTA       shift, and go to state 170
    IF          shift, and go to state 171
    '('         shift, and go to state 45
    VOID_T      shift, and go to state 103
    INT8_T      shift, and go to state 104
    INT16_T     shift, and go to state 105
    INT32_T     shift, and go to state 106
    FLOAT_T     shift, and go to state 107
    DOUBLE_T    shift, and go to state 108
    CONTINUE    shift, and go to state 172
    BREAK       shift, and go to state 173
    '-'         shift, and go to state 46
    NOT         shift, and go to state 47

    xtcc_type      go to state 174
    decl           go to state 175
    func_decl      go to state 114
    statement      go to state 228
    list_stmt      go to state 178
    if_stmt        go to state 179
    fld_stmt       go to state 180
    compound_stmt  go to state 181
    open_curly     go to state 165
    expression     go to state 182


state 226

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' . ':' INUMBER ';'

    ':'  shift, and go to state 229


state 227

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' TEXT ';' .

    $default  reduce using rule 44 (list_stmt)


state 228

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 statement .

    $default  reduce using rule 32 (statement)


state 229

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' . INUMBER ';'

    INUMBER  shift, and go to state 230


state 230

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER . ';'

    ';'  shift, and go to state 231


state 231

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';' .

    $default  reduce using rule 47 (fld_stmt)
