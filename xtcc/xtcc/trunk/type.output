Terminals which are not used

   CONVERT
   CODELIST
   IN


State 224 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 @1: /* empty */

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END
    3     | AXSTART '{' ax_list '}'
    4     | TABSTART '{' tab_list '}'

    5 top_level_item_list: top_level_item
    6                    | top_level_item_list top_level_item

    7 top_level_item: decl
    8               | func_defn

    9 xtcc_type: VOID_T
   10          | INT8_T
   11          | INT16_T
   12          | INT32_T
   13          | FLOAT_T
   14          | DOUBLE_T

   15 @2: /* empty */

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 compound_stmt

   17 decl: xtcc_type NAME ';'
   18     | xtcc_type NAME '=' expression ';'
   19     | xtcc_type NAME '[' INUMBER ']' ';'
   20     | DEFINELIST NAME '=' range_list ';'
   21     | func_decl

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' ';'

   23 decl_comma_list: var_decl
   24                | decl_comma_list ',' var_decl

   25 var_decl: xtcc_type NAME
   26         | xtcc_type NAME '[' INUMBER ']'
   27         | xtcc_type '&' NAME
   28         | /* empty */

   29 statement_list: statement
   30               | statement_list statement

   31 @3: /* empty */

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 statement
   33          | if_stmt
   34          | expression ';'
   35          | compound_stmt
   36          | decl
   37          | list_stmt
   38          | BREAK ';'
   39          | CONTINUE ';'
   40          | fld_stmt
   41          | error ';'

   42 list_stmt: LISTA NAME TEXT ';'
   43          | LISTA NAME '[' expression ']' TEXT ';'
   44          | LISTA NAME '[' expression ',' expression ']' TEXT ';'

   45 if_stmt: IF '(' expression ')' statement
   46        | IF '(' expression ')' statement ELSE statement

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

   48 compound_stmt: open_curly statement_list '}'

   49 open_curly: '{'

   50 expr_list: expression
   51          | expr_list ',' expression

   52 expression: expression '+' expression
   53           | expression '-' expression
   54           | expression '*' expression
   55           | expression '/' expression
   56           | expression '%' expression
   57           | '-' expression
   58           | expression '<' expression
   59           | expression '>' expression
   60           | expression LEQ expression
   61           | expression GEQ expression
   62           | expression ISEQ expression
   63           | expression NOEQ expression
   64           | expression LOGOR expression
   65           | expression LOGAND expression
   66           | expression '=' expression
   67           | NOT expression
   68           | INUMBER
   69           | FNUMBER
   70           | NAME
   71           | NAME '[' expression ']'
   72           | NAME '[' expression ',' expression ']'
   73           | NAME '(' expr_list ')'
   74           | TEXT
   75           | '(' expression ')'

   76 range_list: range
   77           | range_list ',' range

   78 range: INUMBER '-' INUMBER
   79      | INUMBER

   80 tab_list: tab_defn
   81         | tab_list tab_defn

   82 tab_defn: TAB NAME NAME ';'
   83         | TAB NAME NAME ';' COND_START expression ';'
   84         | error ';'

   85 ax_list: ax_defn
   86        | ax_list ax_defn

   87 ax_defn: AX NAME ';' ttl_ax_stmt_list count_ax_stmt_list
   88        | AX NAME ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list
   89        | error ';'

   90 stub_list: stub
   91          | stub_list stub

   92 stub: TEXT '=' INUMBER ';'

   93 ttl_ax_stmt_list: ttl_ax_stmt
   94                 | ttl_ax_stmt_list ttl_ax_stmt

   95 ttl_ax_stmt: TTL ';' TEXT ';'

   96 count_ax_stmt_list: count_ax_stmt
   97                   | count_ax_stmt_list count_ax_stmt

   98 count_ax_stmt: TOT ';' TEXT ';'
   99              | TOT ';' TEXT ';' COND_START expression ';'
  100              | CNT ';' TEXT ';' COND_START expression ';'
  101              | bit_list

  102 bit_list: BIT NAME ';' stub_list ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 56
'&' (38) 27
'(' (40) 16 22 32 45 46 47 73 75
')' (41) 16 22 32 45 46 47 73 75
'*' (42) 54
'+' (43) 52
',' (44) 24 44 47 51 72 77
'-' (45) 53 57 78
'/' (47) 55
':' (58) 47
';' (59) 2 17 18 19 20 22 32 34 38 39 41 42 43 44 47 82 83 84 87 88
    89 92 95 98 99 100 102
'<' (60) 58
'=' (61) 2 18 20 47 66 92
'>' (62) 59
'[' (91) 19 26 43 44 71 72
']' (93) 19 26 43 44 71 72
'{' (123) 3 4 49
'}' (125) 3 4 48
error (256) 41 84 89
CONVERT (258)
TOT (259) 98 99
AX (260) 87 88
CNT (261) 100
TTL (262) 95
FOR (263) 32
FLD (264) 47
BIT (265) 102
TEXT (266) 42 43 44 74 92 95 98 99 100
NAME (267) 16 17 18 19 20 22 25 26 27 42 43 44 47 70 71 72 73 82 83
    87 88 102
DEFINELIST (268) 20
FNUMBER (269) 69
INUMBER (270) 2 19 26 47 68 78 79 92
CODELIST (271)
LISTA (272) 42 43 44
IF (273) 45 46
ELSE (274) 46
IN (275)
VOID_T (276) 9
INT8_T (277) 10
INT16_T (278) 11
INT32_T (279) 12
FLOAT_T (280) 13
DOUBLE_T (281) 14
AXSTART (282) 3
TABSTART (283) 4
ED_START (284) 2
DATA_STRUCT (285) 2
REC_LEN (286) 2
ED_END (287) 2
TAB (288) 82 83
COND_START (289) 83 88 99 100
CONTINUE (290) 39
BREAK (291) 38
LOGOR (292) 64
LOGAND (293) 65
NOEQ (294) 63
ISEQ (295) 62
GEQ (296) 61
LEQ (297) 60
NOT (298) 67
UMINUS (299)
FUNC_CALL (300)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
prog (65)
    on left: 2 3 4, on right: 0
@1 (66)
    on left: 1, on right: 2
top_level_item_list (67)
    on left: 5 6, on right: 2 6
top_level_item (68)
    on left: 7 8, on right: 5 6
xtcc_type (69)
    on left: 9 10 11 12 13 14, on right: 16 17 18 19 22 25 26 27
func_defn (70)
    on left: 16, on right: 8
@2 (71)
    on left: 15, on right: 16
decl (72)
    on left: 17 18 19 20 21, on right: 7 36
func_decl (73)
    on left: 22, on right: 21
decl_comma_list (74)
    on left: 23 24, on right: 16 22 24
var_decl (75)
    on left: 25 26 27 28, on right: 23 24
statement_list (76)
    on left: 29 30, on right: 30 48
statement (77)
    on left: 32 33 34 35 36 37 38 39 40 41, on right: 29 30 32 45 46
@3 (78)
    on left: 31, on right: 32
list_stmt (79)
    on left: 42 43 44, on right: 37
if_stmt (80)
    on left: 45 46, on right: 33
fld_stmt (81)
    on left: 47, on right: 40
compound_stmt (82)
    on left: 48, on right: 16 35
open_curly (83)
    on left: 49, on right: 48
expr_list (84)
    on left: 50 51, on right: 51 73
expression (85)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73 74 75, on right: 18 32 34 43 44 45 46 47 50 51 52 53
    54 55 56 57 58 59 60 61 62 63 64 65 66 67 71 72 75 83 88 99 100
range_list (86)
    on left: 76 77, on right: 20 77
range (87)
    on left: 78 79, on right: 76 77
tab_list (88)
    on left: 80 81, on right: 4 81
tab_defn (89)
    on left: 82 83 84, on right: 80 81
ax_list (90)
    on left: 85 86, on right: 3 86
ax_defn (91)
    on left: 87 88 89, on right: 85 86
stub_list (92)
    on left: 90 91, on right: 91 102
stub (93)
    on left: 92, on right: 90 91
ttl_ax_stmt_list (94)
    on left: 93 94, on right: 87 88 94
ttl_ax_stmt (95)
    on left: 95, on right: 93 94
count_ax_stmt_list (96)
    on left: 96 97, on right: 87 88 97
count_ax_stmt (97)
    on left: 98 99 100 101, on right: 96 97
bit_list (98)
    on left: 102, on right: 101


state 0

    0 $accept: . prog $end

    AXSTART      shift, and go to state 1
    TABSTART     shift, and go to state 2
    DATA_STRUCT  shift, and go to state 3

    prog  go to state 4


state 1

    3 prog: AXSTART . '{' ax_list '}'

    '{'  shift, and go to state 5


state 2

    4 prog: TABSTART . '{' tab_list '}'

    '{'  shift, and go to state 6


state 3

    2 prog: DATA_STRUCT . ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    ';'  shift, and go to state 7


state 4

    0 $accept: prog . $end

    $end  shift, and go to state 8


state 5

    3 prog: AXSTART '{' . ax_list '}'

    error  shift, and go to state 9
    AX     shift, and go to state 10

    ax_list  go to state 11
    ax_defn  go to state 12


state 6

    4 prog: TABSTART '{' . tab_list '}'

    error  shift, and go to state 13
    TAB    shift, and go to state 14

    tab_list  go to state 15
    tab_defn  go to state 16


state 7

    2 prog: DATA_STRUCT ';' . REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    REC_LEN  shift, and go to state 17


state 8

    0 $accept: prog $end .

    $default  accept


state 9

   89 ax_defn: error . ';'

    ';'  shift, and go to state 18


state 10

   87 ax_defn: AX . NAME ';' ttl_ax_stmt_list count_ax_stmt_list
   88        | AX . NAME ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list

    NAME  shift, and go to state 19


state 11

    3 prog: AXSTART '{' ax_list . '}'
   86 ax_list: ax_list . ax_defn

    error  shift, and go to state 9
    AX     shift, and go to state 10
    '}'    shift, and go to state 20

    ax_defn  go to state 21


state 12

   85 ax_list: ax_defn .

    $default  reduce using rule 85 (ax_list)


state 13

   84 tab_defn: error . ';'

    ';'  shift, and go to state 22


state 14

   82 tab_defn: TAB . NAME NAME ';'
   83         | TAB . NAME NAME ';' COND_START expression ';'

    NAME  shift, and go to state 23


state 15

    4 prog: TABSTART '{' tab_list . '}'
   81 tab_list: tab_list . tab_defn

    error  shift, and go to state 13
    '}'    shift, and go to state 24
    TAB    shift, and go to state 14

    tab_defn  go to state 25


state 16

   80 tab_list: tab_defn .

    $default  reduce using rule 80 (tab_list)


state 17

    2 prog: DATA_STRUCT ';' REC_LEN . '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    '='  shift, and go to state 26


state 18

   89 ax_defn: error ';' .

    $default  reduce using rule 89 (ax_defn)


state 19

   87 ax_defn: AX NAME . ';' ttl_ax_stmt_list count_ax_stmt_list
   88        | AX NAME . ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list

    ';'  shift, and go to state 27


state 20

    3 prog: AXSTART '{' ax_list '}' .

    $default  reduce using rule 3 (prog)


state 21

   86 ax_list: ax_list ax_defn .

    $default  reduce using rule 86 (ax_list)


state 22

   84 tab_defn: error ';' .

    $default  reduce using rule 84 (tab_defn)


state 23

   82 tab_defn: TAB NAME . NAME ';'
   83         | TAB NAME . NAME ';' COND_START expression ';'

    NAME  shift, and go to state 28


state 24

    4 prog: TABSTART '{' tab_list '}' .

    $default  reduce using rule 4 (prog)


state 25

   81 tab_list: tab_list tab_defn .

    $default  reduce using rule 81 (tab_list)


state 26

    2 prog: DATA_STRUCT ';' REC_LEN '=' . INUMBER ';' @1 ED_START top_level_item_list ED_END

    INUMBER  shift, and go to state 29


state 27

   87 ax_defn: AX NAME ';' . ttl_ax_stmt_list count_ax_stmt_list
   88        | AX NAME ';' . COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list

    TTL         shift, and go to state 30
    COND_START  shift, and go to state 31

    ttl_ax_stmt_list  go to state 32
    ttl_ax_stmt       go to state 33


state 28

   82 tab_defn: TAB NAME NAME . ';'
   83         | TAB NAME NAME . ';' COND_START expression ';'

    ';'  shift, and go to state 34


state 29

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER . ';' @1 ED_START top_level_item_list ED_END

    ';'  shift, and go to state 35


state 30

   95 ttl_ax_stmt: TTL . ';' TEXT ';'

    ';'  shift, and go to state 36


state 31

   88 ax_defn: AX NAME ';' COND_START . expression ';' ttl_ax_stmt_list count_ax_stmt_list

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 44


state 32

   87 ax_defn: AX NAME ';' ttl_ax_stmt_list . count_ax_stmt_list
   94 ttl_ax_stmt_list: ttl_ax_stmt_list . ttl_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    TTL  shift, and go to state 30
    BIT  shift, and go to state 47

    ttl_ax_stmt         go to state 48
    count_ax_stmt_list  go to state 49
    count_ax_stmt       go to state 50
    bit_list            go to state 51


state 33

   93 ttl_ax_stmt_list: ttl_ax_stmt .

    $default  reduce using rule 93 (ttl_ax_stmt_list)


state 34

   82 tab_defn: TAB NAME NAME ';' .
   83         | TAB NAME NAME ';' . COND_START expression ';'

    COND_START  shift, and go to state 52

    $default  reduce using rule 82 (tab_defn)


state 35

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' . @1 ED_START top_level_item_list ED_END

    $default  reduce using rule 1 (@1)

    @1  go to state 53


state 36

   95 ttl_ax_stmt: TTL ';' . TEXT ';'

    TEXT  shift, and go to state 54


state 37

   74 expression: TEXT .

    $default  reduce using rule 74 (expression)


state 38

   70 expression: NAME .
   71           | NAME . '[' expression ']'
   72           | NAME . '[' expression ',' expression ']'
   73           | NAME . '(' expr_list ')'

    '['  shift, and go to state 55
    '('  shift, and go to state 56

    $default  reduce using rule 70 (expression)


state 39

   69 expression: FNUMBER .

    $default  reduce using rule 69 (expression)


state 40

   68 expression: INUMBER .

    $default  reduce using rule 68 (expression)


state 41

   75 expression: '(' . expression ')'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 57


state 42

   57 expression: '-' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 58


state 43

   67 expression: NOT . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 59


state 44

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   88 ax_defn: AX NAME ';' COND_START expression . ';' ttl_ax_stmt_list count_ax_stmt_list

    ';'     shift, and go to state 60
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 45

   98 count_ax_stmt: TOT . ';' TEXT ';'
   99              | TOT . ';' TEXT ';' COND_START expression ';'

    ';'  shift, and go to state 75


state 46

  100 count_ax_stmt: CNT . ';' TEXT ';' COND_START expression ';'

    ';'  shift, and go to state 76


state 47

  102 bit_list: BIT . NAME ';' stub_list ';'

    NAME  shift, and go to state 77


state 48

   94 ttl_ax_stmt_list: ttl_ax_stmt_list ttl_ax_stmt .

    $default  reduce using rule 94 (ttl_ax_stmt_list)


state 49

   87 ax_defn: AX NAME ';' ttl_ax_stmt_list count_ax_stmt_list .
   97 count_ax_stmt_list: count_ax_stmt_list . count_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    BIT  shift, and go to state 47

    $default  reduce using rule 87 (ax_defn)

    count_ax_stmt  go to state 78
    bit_list       go to state 51


state 50

   96 count_ax_stmt_list: count_ax_stmt .

    $default  reduce using rule 96 (count_ax_stmt_list)


state 51

  101 count_ax_stmt: bit_list .

    $default  reduce using rule 101 (count_ax_stmt)


state 52

   83 tab_defn: TAB NAME NAME ';' COND_START . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 79


state 53

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 . ED_START top_level_item_list ED_END

    ED_START  shift, and go to state 80


state 54

   95 ttl_ax_stmt: TTL ';' TEXT . ';'

    ';'  shift, and go to state 81


state 55

   71 expression: NAME '[' . expression ']'
   72           | NAME '[' . expression ',' expression ']'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 82


state 56

   73 expression: NAME '(' . expr_list ')'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expr_list   go to state 83
    expression  go to state 84


state 57

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   75           | '(' expression . ')'

    ')'     shift, and go to state 85
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 58

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   57           | '-' expression .
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 57 (expression)


state 59

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   67           | NOT expression .

    $default  reduce using rule 67 (expression)


state 60

   88 ax_defn: AX NAME ';' COND_START expression ';' . ttl_ax_stmt_list count_ax_stmt_list

    TTL  shift, and go to state 30

    ttl_ax_stmt_list  go to state 86
    ttl_ax_stmt       go to state 33


state 61

   66 expression: expression '=' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 87


state 62

   64 expression: expression LOGOR . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 88


state 63

   65 expression: expression LOGAND . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 89


state 64

   63 expression: expression NOEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 90


state 65

   62 expression: expression ISEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 91


state 66

   58 expression: expression '<' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 92


state 67

   59 expression: expression '>' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 93


state 68

   61 expression: expression GEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 94


state 69

   60 expression: expression LEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 95


state 70

   53 expression: expression '-' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 96


state 71

   52 expression: expression '+' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 97


state 72

   54 expression: expression '*' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 98


state 73

   55 expression: expression '/' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 99


state 74

   56 expression: expression '%' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 100


state 75

   98 count_ax_stmt: TOT ';' . TEXT ';'
   99              | TOT ';' . TEXT ';' COND_START expression ';'

    TEXT  shift, and go to state 101


state 76

  100 count_ax_stmt: CNT ';' . TEXT ';' COND_START expression ';'

    TEXT  shift, and go to state 102


state 77

  102 bit_list: BIT NAME . ';' stub_list ';'

    ';'  shift, and go to state 103


state 78

   97 count_ax_stmt_list: count_ax_stmt_list count_ax_stmt .

    $default  reduce using rule 97 (count_ax_stmt_list)


state 79

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   83 tab_defn: TAB NAME NAME ';' COND_START expression . ';'

    ';'     shift, and go to state 104
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 80

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START . top_level_item_list ED_END

    DEFINELIST  shift, and go to state 105
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111

    top_level_item_list  go to state 112
    top_level_item       go to state 113
    xtcc_type            go to state 114
    func_defn            go to state 115
    decl                 go to state 116
    func_decl            go to state 117


state 81

   95 ttl_ax_stmt: TTL ';' TEXT ';' .

    $default  reduce using rule 95 (ttl_ax_stmt)


state 82

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   71           | NAME '[' expression . ']'
   72           | NAME '[' expression . ',' expression ']'

    ']'     shift, and go to state 118
    '='     shift, and go to state 61
    ','     shift, and go to state 119
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 83

   51 expr_list: expr_list . ',' expression
   73 expression: NAME '(' expr_list . ')'

    ')'  shift, and go to state 120
    ','  shift, and go to state 121


state 84

   50 expr_list: expression .
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74

    $default  reduce using rule 50 (expr_list)


state 85

   75 expression: '(' expression ')' .

    $default  reduce using rule 75 (expression)


state 86

   88 ax_defn: AX NAME ';' COND_START expression ';' ttl_ax_stmt_list . count_ax_stmt_list
   94 ttl_ax_stmt_list: ttl_ax_stmt_list . ttl_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    TTL  shift, and go to state 30
    BIT  shift, and go to state 47

    ttl_ax_stmt         go to state 48
    count_ax_stmt_list  go to state 122
    count_ax_stmt       go to state 50
    bit_list            go to state 51


state 87

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   66           | expression '=' expression .

    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74

    $default  reduce using rule 66 (expression)


state 88

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   64           | expression LOGOR expression .
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74

    $default  reduce using rule 64 (expression)


state 89

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   65           | expression LOGAND expression .
   66           | expression . '=' expression

    NOEQ  shift, and go to state 64
    ISEQ  shift, and go to state 65
    '<'   shift, and go to state 66
    '>'   shift, and go to state 67
    GEQ   shift, and go to state 68
    LEQ   shift, and go to state 69
    '-'   shift, and go to state 70
    '+'   shift, and go to state 71
    '*'   shift, and go to state 72
    '/'   shift, and go to state 73
    '%'   shift, and go to state 74

    $default  reduce using rule 65 (expression)


state 90

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   63           | expression NOEQ expression .
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '<'  shift, and go to state 66
    '>'  shift, and go to state 67
    GEQ  shift, and go to state 68
    LEQ  shift, and go to state 69
    '-'  shift, and go to state 70
    '+'  shift, and go to state 71
    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 63 (expression)


state 91

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   62           | expression ISEQ expression .
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '<'  shift, and go to state 66
    '>'  shift, and go to state 67
    GEQ  shift, and go to state 68
    LEQ  shift, and go to state 69
    '-'  shift, and go to state 70
    '+'  shift, and go to state 71
    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 62 (expression)


state 92

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   58           | expression '<' expression .
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 70
    '+'  shift, and go to state 71
    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 58 (expression)


state 93

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   59           | expression '>' expression .
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 70
    '+'  shift, and go to state 71
    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 59 (expression)


state 94

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   61           | expression GEQ expression .
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 70
    '+'  shift, and go to state 71
    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 61 (expression)


state 95

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   60           | expression LEQ expression .
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 70
    '+'  shift, and go to state 71
    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 60 (expression)


state 96

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   53           | expression '-' expression .
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 53 (expression)


state 97

   52 expression: expression . '+' expression
   52           | expression '+' expression .
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73
    '%'  shift, and go to state 74

    $default  reduce using rule 52 (expression)


state 98

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   54           | expression '*' expression .
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 54 (expression)


state 99

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   55           | expression '/' expression .
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 55 (expression)


state 100

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   56           | expression '%' expression .
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 56 (expression)


state 101

   98 count_ax_stmt: TOT ';' TEXT . ';'
   99              | TOT ';' TEXT . ';' COND_START expression ';'

    ';'  shift, and go to state 123


state 102

  100 count_ax_stmt: CNT ';' TEXT . ';' COND_START expression ';'

    ';'  shift, and go to state 124


state 103

  102 bit_list: BIT NAME ';' . stub_list ';'

    TEXT  shift, and go to state 125

    stub_list  go to state 126
    stub       go to state 127


state 104

   83 tab_defn: TAB NAME NAME ';' COND_START expression ';' .

    $default  reduce using rule 83 (tab_defn)


state 105

   20 decl: DEFINELIST . NAME '=' range_list ';'

    NAME  shift, and go to state 128


state 106

    9 xtcc_type: VOID_T .

    $default  reduce using rule 9 (xtcc_type)


state 107

   10 xtcc_type: INT8_T .

    $default  reduce using rule 10 (xtcc_type)


state 108

   11 xtcc_type: INT16_T .

    $default  reduce using rule 11 (xtcc_type)


state 109

   12 xtcc_type: INT32_T .

    $default  reduce using rule 12 (xtcc_type)


state 110

   13 xtcc_type: FLOAT_T .

    $default  reduce using rule 13 (xtcc_type)


state 111

   14 xtcc_type: DOUBLE_T .

    $default  reduce using rule 14 (xtcc_type)


state 112

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list . ED_END
    6 top_level_item_list: top_level_item_list . top_level_item

    DEFINELIST  shift, and go to state 105
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111
    ED_END      shift, and go to state 129

    top_level_item  go to state 130
    xtcc_type       go to state 114
    func_defn       go to state 115
    decl            go to state 116
    func_decl       go to state 117


state 113

    5 top_level_item_list: top_level_item .

    $default  reduce using rule 5 (top_level_item_list)


state 114

   16 func_defn: xtcc_type . NAME '(' decl_comma_list ')' @2 compound_stmt
   17 decl: xtcc_type . NAME ';'
   18     | xtcc_type . NAME '=' expression ';'
   19     | xtcc_type . NAME '[' INUMBER ']' ';'
   22 func_decl: xtcc_type . NAME '(' decl_comma_list ')' ';'

    NAME  shift, and go to state 131


state 115

    8 top_level_item: func_defn .

    $default  reduce using rule 8 (top_level_item)


state 116

    7 top_level_item: decl .

    $default  reduce using rule 7 (top_level_item)


state 117

   21 decl: func_decl .

    $default  reduce using rule 21 (decl)


state 118

   71 expression: NAME '[' expression ']' .

    $default  reduce using rule 71 (expression)


state 119

   72 expression: NAME '[' expression ',' . expression ']'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 132


state 120

   73 expression: NAME '(' expr_list ')' .

    $default  reduce using rule 73 (expression)


state 121

   51 expr_list: expr_list ',' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 133


state 122

   88 ax_defn: AX NAME ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list .
   97 count_ax_stmt_list: count_ax_stmt_list . count_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    BIT  shift, and go to state 47

    $default  reduce using rule 88 (ax_defn)

    count_ax_stmt  go to state 78
    bit_list       go to state 51


state 123

   98 count_ax_stmt: TOT ';' TEXT ';' .
   99              | TOT ';' TEXT ';' . COND_START expression ';'

    COND_START  shift, and go to state 134

    $default  reduce using rule 98 (count_ax_stmt)


state 124

  100 count_ax_stmt: CNT ';' TEXT ';' . COND_START expression ';'

    COND_START  shift, and go to state 135


state 125

   92 stub: TEXT . '=' INUMBER ';'

    '='  shift, and go to state 136


state 126

   91 stub_list: stub_list . stub
  102 bit_list: BIT NAME ';' stub_list . ';'

    ';'   shift, and go to state 137
    TEXT  shift, and go to state 125

    stub  go to state 138


state 127

   90 stub_list: stub .

    $default  reduce using rule 90 (stub_list)


state 128

   20 decl: DEFINELIST NAME . '=' range_list ';'

    '='  shift, and go to state 139


state 129

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END .

    $default  reduce using rule 2 (prog)


state 130

    6 top_level_item_list: top_level_item_list top_level_item .

    $default  reduce using rule 6 (top_level_item_list)


state 131

   16 func_defn: xtcc_type NAME . '(' decl_comma_list ')' @2 compound_stmt
   17 decl: xtcc_type NAME . ';'
   18     | xtcc_type NAME . '=' expression ';'
   19     | xtcc_type NAME . '[' INUMBER ']' ';'
   22 func_decl: xtcc_type NAME . '(' decl_comma_list ')' ';'

    ';'  shift, and go to state 140
    '['  shift, and go to state 141
    '('  shift, and go to state 142
    '='  shift, and go to state 143


state 132

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   72           | NAME '[' expression ',' expression . ']'

    ']'     shift, and go to state 144
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 133

   51 expr_list: expr_list ',' expression .
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74

    $default  reduce using rule 51 (expr_list)


state 134

   99 count_ax_stmt: TOT ';' TEXT ';' COND_START . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 145


state 135

  100 count_ax_stmt: CNT ';' TEXT ';' COND_START . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 146


state 136

   92 stub: TEXT '=' . INUMBER ';'

    INUMBER  shift, and go to state 147


state 137

  102 bit_list: BIT NAME ';' stub_list ';' .

    $default  reduce using rule 102 (bit_list)


state 138

   91 stub_list: stub_list stub .

    $default  reduce using rule 91 (stub_list)


state 139

   20 decl: DEFINELIST NAME '=' . range_list ';'

    INUMBER  shift, and go to state 148

    range_list  go to state 149
    range       go to state 150


state 140

   17 decl: xtcc_type NAME ';' .

    $default  reduce using rule 17 (decl)


state 141

   19 decl: xtcc_type NAME '[' . INUMBER ']' ';'

    INUMBER  shift, and go to state 151


state 142

   16 func_defn: xtcc_type NAME '(' . decl_comma_list ')' @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' . decl_comma_list ')' ';'

    VOID_T    shift, and go to state 106
    INT8_T    shift, and go to state 107
    INT16_T   shift, and go to state 108
    INT32_T   shift, and go to state 109
    FLOAT_T   shift, and go to state 110
    DOUBLE_T  shift, and go to state 111

    $default  reduce using rule 28 (var_decl)

    xtcc_type        go to state 152
    decl_comma_list  go to state 153
    var_decl         go to state 154


state 143

   18 decl: xtcc_type NAME '=' . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 155


state 144

   72 expression: NAME '[' expression ',' expression ']' .

    $default  reduce using rule 72 (expression)


state 145

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   99 count_ax_stmt: TOT ';' TEXT ';' COND_START expression . ';'

    ';'     shift, and go to state 156
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 146

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
  100 count_ax_stmt: CNT ';' TEXT ';' COND_START expression . ';'

    ';'     shift, and go to state 157
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 147

   92 stub: TEXT '=' INUMBER . ';'

    ';'  shift, and go to state 158


state 148

   78 range: INUMBER . '-' INUMBER
   79      | INUMBER .

    '-'  shift, and go to state 159

    $default  reduce using rule 79 (range)


state 149

   20 decl: DEFINELIST NAME '=' range_list . ';'
   77 range_list: range_list . ',' range

    ';'  shift, and go to state 160
    ','  shift, and go to state 161


state 150

   76 range_list: range .

    $default  reduce using rule 76 (range_list)


state 151

   19 decl: xtcc_type NAME '[' INUMBER . ']' ';'

    ']'  shift, and go to state 162


state 152

   25 var_decl: xtcc_type . NAME
   26         | xtcc_type . NAME '[' INUMBER ']'
   27         | xtcc_type . '&' NAME

    NAME  shift, and go to state 163
    '&'   shift, and go to state 164


state 153

   16 func_defn: xtcc_type NAME '(' decl_comma_list . ')' @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' decl_comma_list . ')' ';'
   24 decl_comma_list: decl_comma_list . ',' var_decl

    ')'  shift, and go to state 165
    ','  shift, and go to state 166


state 154

   23 decl_comma_list: var_decl .

    $default  reduce using rule 23 (decl_comma_list)


state 155

   18 decl: xtcc_type NAME '=' expression . ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 167
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 156

   99 count_ax_stmt: TOT ';' TEXT ';' COND_START expression ';' .

    $default  reduce using rule 99 (count_ax_stmt)


state 157

  100 count_ax_stmt: CNT ';' TEXT ';' COND_START expression ';' .

    $default  reduce using rule 100 (count_ax_stmt)


state 158

   92 stub: TEXT '=' INUMBER ';' .

    $default  reduce using rule 92 (stub)


state 159

   78 range: INUMBER '-' . INUMBER

    INUMBER  shift, and go to state 168


state 160

   20 decl: DEFINELIST NAME '=' range_list ';' .

    $default  reduce using rule 20 (decl)


state 161

   77 range_list: range_list ',' . range

    INUMBER  shift, and go to state 148

    range  go to state 169


state 162

   19 decl: xtcc_type NAME '[' INUMBER ']' . ';'

    ';'  shift, and go to state 170


state 163

   25 var_decl: xtcc_type NAME .
   26         | xtcc_type NAME . '[' INUMBER ']'

    '['  shift, and go to state 171

    $default  reduce using rule 25 (var_decl)


state 164

   27 var_decl: xtcc_type '&' . NAME

    NAME  shift, and go to state 172


state 165

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' . @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' . ';'

    ';'  shift, and go to state 173

    $default  reduce using rule 15 (@2)

    @2  go to state 174


state 166

   24 decl_comma_list: decl_comma_list ',' . var_decl

    VOID_T    shift, and go to state 106
    INT8_T    shift, and go to state 107
    INT16_T   shift, and go to state 108
    INT32_T   shift, and go to state 109
    FLOAT_T   shift, and go to state 110
    DOUBLE_T  shift, and go to state 111

    $default  reduce using rule 28 (var_decl)

    xtcc_type  go to state 152
    var_decl   go to state 175


state 167

   18 decl: xtcc_type NAME '=' expression ';' .

    $default  reduce using rule 18 (decl)


state 168

   78 range: INUMBER '-' INUMBER .

    $default  reduce using rule 78 (range)


state 169

   77 range_list: range_list ',' range .

    $default  reduce using rule 77 (range_list)


state 170

   19 decl: xtcc_type NAME '[' INUMBER ']' ';' .

    $default  reduce using rule 19 (decl)


state 171

   26 var_decl: xtcc_type NAME '[' . INUMBER ']'

    INUMBER  shift, and go to state 176


state 172

   27 var_decl: xtcc_type '&' NAME .

    $default  reduce using rule 27 (var_decl)


state 173

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' ';' .

    $default  reduce using rule 22 (func_decl)


state 174

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 . compound_stmt

    '{'  shift, and go to state 177

    compound_stmt  go to state 178
    open_curly     go to state 179


state 175

   24 decl_comma_list: decl_comma_list ',' var_decl .

    $default  reduce using rule 24 (decl_comma_list)


state 176

   26 var_decl: xtcc_type NAME '[' INUMBER . ']'

    ']'  shift, and go to state 180


state 177

   49 open_curly: '{' .

    $default  reduce using rule 49 (open_curly)


state 178

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 compound_stmt .

    $default  reduce using rule 16 (func_defn)


state 179

   48 compound_stmt: open_curly . statement_list '}'

    error       shift, and go to state 181
    '{'         shift, and go to state 177
    FOR         shift, and go to state 182
    FLD         shift, and go to state 183
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 105
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 184
    IF          shift, and go to state 185
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111
    CONTINUE    shift, and go to state 186
    BREAK       shift, and go to state 187
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type       go to state 188
    decl            go to state 189
    func_decl       go to state 117
    statement_list  go to state 190
    statement       go to state 191
    list_stmt       go to state 192
    if_stmt         go to state 193
    fld_stmt        go to state 194
    compound_stmt   go to state 195
    open_curly      go to state 179
    expression      go to state 196


state 180

   26 var_decl: xtcc_type NAME '[' INUMBER ']' .

    $default  reduce using rule 26 (var_decl)


state 181

   41 statement: error . ';'

    ';'  shift, and go to state 197


state 182

   32 statement: FOR . '(' expression ';' expression ';' expression ')' @3 statement

    '('  shift, and go to state 198


state 183

   47 fld_stmt: FLD . NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

    NAME  shift, and go to state 199


state 184

   42 list_stmt: LISTA . NAME TEXT ';'
   43          | LISTA . NAME '[' expression ']' TEXT ';'
   44          | LISTA . NAME '[' expression ',' expression ']' TEXT ';'

    NAME  shift, and go to state 200


state 185

   45 if_stmt: IF . '(' expression ')' statement
   46        | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 201


state 186

   39 statement: CONTINUE . ';'

    ';'  shift, and go to state 202


state 187

   38 statement: BREAK . ';'

    ';'  shift, and go to state 203


state 188

   17 decl: xtcc_type . NAME ';'
   18     | xtcc_type . NAME '=' expression ';'
   19     | xtcc_type . NAME '[' INUMBER ']' ';'
   22 func_decl: xtcc_type . NAME '(' decl_comma_list ')' ';'

    NAME  shift, and go to state 204


state 189

   36 statement: decl .

    $default  reduce using rule 36 (statement)


state 190

   30 statement_list: statement_list . statement
   48 compound_stmt: open_curly statement_list . '}'

    error       shift, and go to state 181
    '{'         shift, and go to state 177
    '}'         shift, and go to state 205
    FOR         shift, and go to state 182
    FLD         shift, and go to state 183
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 105
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 184
    IF          shift, and go to state 185
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111
    CONTINUE    shift, and go to state 186
    BREAK       shift, and go to state 187
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 188
    decl           go to state 189
    func_decl      go to state 117
    statement      go to state 206
    list_stmt      go to state 192
    if_stmt        go to state 193
    fld_stmt       go to state 194
    compound_stmt  go to state 195
    open_curly     go to state 179
    expression     go to state 196


state 191

   29 statement_list: statement .

    $default  reduce using rule 29 (statement_list)


state 192

   37 statement: list_stmt .

    $default  reduce using rule 37 (statement)


state 193

   33 statement: if_stmt .

    $default  reduce using rule 33 (statement)


state 194

   40 statement: fld_stmt .

    $default  reduce using rule 40 (statement)


state 195

   35 statement: compound_stmt .

    $default  reduce using rule 35 (statement)


state 196

   34 statement: expression . ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 207
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 197

   41 statement: error ';' .

    $default  reduce using rule 41 (statement)


state 198

   32 statement: FOR '(' . expression ';' expression ';' expression ')' @3 statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 208


state 199

   47 fld_stmt: FLD NAME . '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

    '='  shift, and go to state 209


state 200

   42 list_stmt: LISTA NAME . TEXT ';'
   43          | LISTA NAME . '[' expression ']' TEXT ';'
   44          | LISTA NAME . '[' expression ',' expression ']' TEXT ';'

    TEXT  shift, and go to state 210
    '['   shift, and go to state 211


state 201

   45 if_stmt: IF '(' . expression ')' statement
   46        | IF '(' . expression ')' statement ELSE statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 212


state 202

   39 statement: CONTINUE ';' .

    $default  reduce using rule 39 (statement)


state 203

   38 statement: BREAK ';' .

    $default  reduce using rule 38 (statement)


state 204

   17 decl: xtcc_type NAME . ';'
   18     | xtcc_type NAME . '=' expression ';'
   19     | xtcc_type NAME . '[' INUMBER ']' ';'
   22 func_decl: xtcc_type NAME . '(' decl_comma_list ')' ';'

    ';'  shift, and go to state 140
    '['  shift, and go to state 141
    '('  shift, and go to state 213
    '='  shift, and go to state 143


state 205

   48 compound_stmt: open_curly statement_list '}' .

    $default  reduce using rule 48 (compound_stmt)


state 206

   30 statement_list: statement_list statement .

    $default  reduce using rule 30 (statement_list)


state 207

   34 statement: expression ';' .

    $default  reduce using rule 34 (statement)


state 208

   32 statement: FOR '(' expression . ';' expression ';' expression ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 214
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 209

   47 fld_stmt: FLD NAME '=' . NAME '(' expression ',' expression ')' ':' INUMBER ';'

    NAME  shift, and go to state 215


state 210

   42 list_stmt: LISTA NAME TEXT . ';'

    ';'  shift, and go to state 216


state 211

   43 list_stmt: LISTA NAME '[' . expression ']' TEXT ';'
   44          | LISTA NAME '[' . expression ',' expression ']' TEXT ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 217


state 212

   45 if_stmt: IF '(' expression . ')' statement
   46        | IF '(' expression . ')' statement ELSE statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 218
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 213

   22 func_decl: xtcc_type NAME '(' . decl_comma_list ')' ';'

    VOID_T    shift, and go to state 106
    INT8_T    shift, and go to state 107
    INT16_T   shift, and go to state 108
    INT32_T   shift, and go to state 109
    FLOAT_T   shift, and go to state 110
    DOUBLE_T  shift, and go to state 111

    $default  reduce using rule 28 (var_decl)

    xtcc_type        go to state 152
    decl_comma_list  go to state 219
    var_decl         go to state 154


state 214

   32 statement: FOR '(' expression ';' . expression ';' expression ')' @3 statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 220


state 215

   47 fld_stmt: FLD NAME '=' NAME . '(' expression ',' expression ')' ':' INUMBER ';'

    '('  shift, and go to state 221


state 216

   42 list_stmt: LISTA NAME TEXT ';' .

    $default  reduce using rule 42 (list_stmt)


state 217

   43 list_stmt: LISTA NAME '[' expression . ']' TEXT ';'
   44          | LISTA NAME '[' expression . ',' expression ']' TEXT ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ']'     shift, and go to state 222
    '='     shift, and go to state 61
    ','     shift, and go to state 223
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 218

   45 if_stmt: IF '(' expression ')' . statement
   46        | IF '(' expression ')' . statement ELSE statement

    error       shift, and go to state 181
    '{'         shift, and go to state 177
    FOR         shift, and go to state 182
    FLD         shift, and go to state 183
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 105
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 184
    IF          shift, and go to state 185
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111
    CONTINUE    shift, and go to state 186
    BREAK       shift, and go to state 187
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 188
    decl           go to state 189
    func_decl      go to state 117
    statement      go to state 224
    list_stmt      go to state 192
    if_stmt        go to state 193
    fld_stmt       go to state 194
    compound_stmt  go to state 195
    open_curly     go to state 179
    expression     go to state 196


state 219

   22 func_decl: xtcc_type NAME '(' decl_comma_list . ')' ';'
   24 decl_comma_list: decl_comma_list . ',' var_decl

    ')'  shift, and go to state 225
    ','  shift, and go to state 166


state 220

   32 statement: FOR '(' expression ';' expression . ';' expression ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 226
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 221

   47 fld_stmt: FLD NAME '=' NAME '(' . expression ',' expression ')' ':' INUMBER ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 227


state 222

   43 list_stmt: LISTA NAME '[' expression ']' . TEXT ';'

    TEXT  shift, and go to state 228


state 223

   44 list_stmt: LISTA NAME '[' expression ',' . expression ']' TEXT ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 229


state 224

   45 if_stmt: IF '(' expression ')' statement .
   46        | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 230

    ELSE      [reduce using rule 45 (if_stmt)]
    $default  reduce using rule 45 (if_stmt)


state 225

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' . ';'

    ';'  shift, and go to state 173


state 226

   32 statement: FOR '(' expression ';' expression ';' . expression ')' @3 statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 231


state 227

   47 fld_stmt: FLD NAME '=' NAME '(' expression . ',' expression ')' ':' INUMBER ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 61
    ','     shift, and go to state 232
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 228

   43 list_stmt: LISTA NAME '[' expression ']' TEXT . ';'

    ';'  shift, and go to state 233


state 229

   44 list_stmt: LISTA NAME '[' expression ',' expression . ']' TEXT ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ']'     shift, and go to state 234
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 230

   46 if_stmt: IF '(' expression ')' statement ELSE . statement

    error       shift, and go to state 181
    '{'         shift, and go to state 177
    FOR         shift, and go to state 182
    FLD         shift, and go to state 183
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 105
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 184
    IF          shift, and go to state 185
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111
    CONTINUE    shift, and go to state 186
    BREAK       shift, and go to state 187
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 188
    decl           go to state 189
    func_decl      go to state 117
    statement      go to state 235
    list_stmt      go to state 192
    if_stmt        go to state 193
    fld_stmt       go to state 194
    compound_stmt  go to state 195
    open_curly     go to state 179
    expression     go to state 196


state 231

   32 statement: FOR '(' expression ';' expression ';' expression . ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 236
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 232

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' . expression ')' ':' INUMBER ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 237


state 233

   43 list_stmt: LISTA NAME '[' expression ']' TEXT ';' .

    $default  reduce using rule 43 (list_stmt)


state 234

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' . TEXT ';'

    TEXT  shift, and go to state 238


state 235

   46 if_stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 46 (if_stmt)


state 236

   32 statement: FOR '(' expression ';' expression ';' expression ')' . @3 statement

    $default  reduce using rule 31 (@3)

    @3  go to state 239


state 237

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression . ')' ':' INUMBER ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 240
    '='     shift, and go to state 61
    LOGOR   shift, and go to state 62
    LOGAND  shift, and go to state 63
    NOEQ    shift, and go to state 64
    ISEQ    shift, and go to state 65
    '<'     shift, and go to state 66
    '>'     shift, and go to state 67
    GEQ     shift, and go to state 68
    LEQ     shift, and go to state 69
    '-'     shift, and go to state 70
    '+'     shift, and go to state 71
    '*'     shift, and go to state 72
    '/'     shift, and go to state 73
    '%'     shift, and go to state 74


state 238

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' TEXT . ';'

    ';'  shift, and go to state 241


state 239

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 . statement

    error       shift, and go to state 181
    '{'         shift, and go to state 177
    FOR         shift, and go to state 182
    FLD         shift, and go to state 183
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 105
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 184
    IF          shift, and go to state 185
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 106
    INT8_T      shift, and go to state 107
    INT16_T     shift, and go to state 108
    INT32_T     shift, and go to state 109
    FLOAT_T     shift, and go to state 110
    DOUBLE_T    shift, and go to state 111
    CONTINUE    shift, and go to state 186
    BREAK       shift, and go to state 187
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 188
    decl           go to state 189
    func_decl      go to state 117
    statement      go to state 242
    list_stmt      go to state 192
    if_stmt        go to state 193
    fld_stmt       go to state 194
    compound_stmt  go to state 195
    open_curly     go to state 179
    expression     go to state 196


state 240

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' . ':' INUMBER ';'

    ':'  shift, and go to state 243


state 241

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' TEXT ';' .

    $default  reduce using rule 44 (list_stmt)


state 242

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 statement .

    $default  reduce using rule 32 (statement)


state 243

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' . INUMBER ';'

    INUMBER  shift, and go to state 244


state 244

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER . ';'

    ';'  shift, and go to state 245


state 245

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';' .

    $default  reduce using rule 47 (fld_stmt)
