Terminals which are not used

   CONVERT
   CODELIST


State 226 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 @1: /* empty */

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END
    3     | AXSTART '{' ax_list '}'
    4     | TABSTART '{' tab_list '}'

    5 top_level_item_list: top_level_item
    6                    | top_level_item_list top_level_item

    7 top_level_item: decl
    8               | func_defn

    9 xtcc_type: VOID_T
   10          | INT8_T
   11          | INT16_T
   12          | INT32_T
   13          | FLOAT_T
   14          | DOUBLE_T

   15 @2: /* empty */

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 compound_stmt

   17 decl: xtcc_type NAME ';'
   18     | xtcc_type NAME '=' expression ';'
   19     | xtcc_type NAME '[' INUMBER ']' ';'
   20     | DEFINELIST NAME '=' range_list ';'
   21     | func_decl

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' ';'

   23 decl_comma_list: var_decl
   24                | decl_comma_list ',' var_decl

   25 var_decl: xtcc_type NAME
   26         | xtcc_type NAME '[' INUMBER ']'
   27         | xtcc_type '&' NAME
   28         | /* empty */

   29 statement_list: statement
   30               | statement_list statement

   31 @3: /* empty */

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 statement
   33          | if_stmt
   34          | expression ';'
   35          | compound_stmt
   36          | decl
   37          | list_stmt
   38          | BREAK ';'
   39          | CONTINUE ';'
   40          | fld_stmt
   41          | error ';'

   42 list_stmt: LISTA NAME TEXT ';'
   43          | LISTA NAME '[' expression ']' TEXT ';'
   44          | LISTA NAME '[' expression ',' expression ']' TEXT ';'

   45 if_stmt: IF '(' expression ')' statement
   46        | IF '(' expression ')' statement ELSE statement

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

   48 compound_stmt: open_curly statement_list '}'

   49 open_curly: '{'

   50 expr_list: expression
   51          | expr_list ',' expression

   52 expression: expression '+' expression
   53           | expression '-' expression
   54           | expression '*' expression
   55           | expression '/' expression
   56           | expression '%' expression
   57           | '-' expression
   58           | expression '<' expression
   59           | expression '>' expression
   60           | expression LEQ expression
   61           | expression GEQ expression
   62           | expression ISEQ expression
   63           | expression NOEQ expression
   64           | expression LOGOR expression
   65           | expression LOGAND expression
   66           | expression '=' expression
   67           | NOT expression
   68           | INUMBER
   69           | FNUMBER
   70           | NAME
   71           | NAME '[' expression ']'
   72           | NAME '[' expression ',' expression ']'
   73           | NAME '(' expr_list ')'
   74           | TEXT
   75           | '(' expression ')'
   76           | NAME IN NAME

   77 range_list: range
   78           | range_list ',' range

   79 range: INUMBER '-' INUMBER
   80      | INUMBER

   81 tab_list: tab_defn
   82         | tab_list tab_defn

   83 tab_defn: TAB NAME NAME ';'
   84         | TAB NAME NAME ';' COND_START expression ';'
   85         | error ';'

   86 ax_list: ax_defn
   87        | ax_list ax_defn

   88 ax_defn: AX NAME ';' ttl_ax_stmt_list count_ax_stmt_list
   89        | AX NAME ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list
   90        | error ';'

   91 stub_list: stub
   92          | stub_list stub

   93 stub: TEXT '=' INUMBER ';'

   94 ttl_ax_stmt_list: ttl_ax_stmt
   95                 | ttl_ax_stmt_list ttl_ax_stmt

   96 ttl_ax_stmt: TTL ';' TEXT ';'

   97 count_ax_stmt_list: count_ax_stmt
   98                   | count_ax_stmt_list count_ax_stmt

   99 count_ax_stmt: TOT ';' TEXT ';'
  100              | TOT ';' TEXT ';' COND_START expression ';'
  101              | CNT ';' TEXT ';' COND_START expression ';'
  102              | bit_list

  103 bit_list: BIT NAME ';' stub_list ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 56
'&' (38) 27
'(' (40) 16 22 32 45 46 47 73 75
')' (41) 16 22 32 45 46 47 73 75
'*' (42) 54
'+' (43) 52
',' (44) 24 44 47 51 72 78
'-' (45) 53 57 79
'/' (47) 55
':' (58) 47
';' (59) 2 17 18 19 20 22 32 34 38 39 41 42 43 44 47 83 84 85 88 89
    90 93 96 99 100 101 103
'<' (60) 58
'=' (61) 2 18 20 47 66 93
'>' (62) 59
'[' (91) 19 26 43 44 71 72
']' (93) 19 26 43 44 71 72
'{' (123) 3 4 49
'}' (125) 3 4 48
error (256) 41 85 90
CONVERT (258)
TOT (259) 99 100
AX (260) 88 89
CNT (261) 101
TTL (262) 96
FOR (263) 32
FLD (264) 47
BIT (265) 103
TEXT (266) 42 43 44 74 93 96 99 100 101
NAME (267) 16 17 18 19 20 22 25 26 27 42 43 44 47 70 71 72 73 76 83
    84 88 89 103
DEFINELIST (268) 20
FNUMBER (269) 69
INUMBER (270) 2 19 26 47 68 79 80 93
CODELIST (271)
LISTA (272) 42 43 44
IF (273) 45 46
ELSE (274) 46
IN (275) 76
VOID_T (276) 9
INT8_T (277) 10
INT16_T (278) 11
INT32_T (279) 12
FLOAT_T (280) 13
DOUBLE_T (281) 14
AXSTART (282) 3
TABSTART (283) 4
ED_START (284) 2
DATA_STRUCT (285) 2
REC_LEN (286) 2
ED_END (287) 2
TAB (288) 83 84
COND_START (289) 84 89 100 101
CONTINUE (290) 39
BREAK (291) 38
LOGOR (292) 64
LOGAND (293) 65
NOEQ (294) 63
ISEQ (295) 62
GEQ (296) 61
LEQ (297) 60
NOT (298) 67
UMINUS (299)
FUNC_CALL (300)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
prog (65)
    on left: 2 3 4, on right: 0
@1 (66)
    on left: 1, on right: 2
top_level_item_list (67)
    on left: 5 6, on right: 2 6
top_level_item (68)
    on left: 7 8, on right: 5 6
xtcc_type (69)
    on left: 9 10 11 12 13 14, on right: 16 17 18 19 22 25 26 27
func_defn (70)
    on left: 16, on right: 8
@2 (71)
    on left: 15, on right: 16
decl (72)
    on left: 17 18 19 20 21, on right: 7 36
func_decl (73)
    on left: 22, on right: 21
decl_comma_list (74)
    on left: 23 24, on right: 16 22 24
var_decl (75)
    on left: 25 26 27 28, on right: 23 24
statement_list (76)
    on left: 29 30, on right: 30 48
statement (77)
    on left: 32 33 34 35 36 37 38 39 40 41, on right: 29 30 32 45 46
@3 (78)
    on left: 31, on right: 32
list_stmt (79)
    on left: 42 43 44, on right: 37
if_stmt (80)
    on left: 45 46, on right: 33
fld_stmt (81)
    on left: 47, on right: 40
compound_stmt (82)
    on left: 48, on right: 16 35
open_curly (83)
    on left: 49, on right: 48
expr_list (84)
    on left: 50 51, on right: 51 73
expression (85)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73 74 75 76, on right: 18 32 34 43 44 45 46 47 50 51 52
    53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 71 72 75 84 89 100
    101
range_list (86)
    on left: 77 78, on right: 20 78
range (87)
    on left: 79 80, on right: 77 78
tab_list (88)
    on left: 81 82, on right: 4 82
tab_defn (89)
    on left: 83 84 85, on right: 81 82
ax_list (90)
    on left: 86 87, on right: 3 87
ax_defn (91)
    on left: 88 89 90, on right: 86 87
stub_list (92)
    on left: 91 92, on right: 92 103
stub (93)
    on left: 93, on right: 91 92
ttl_ax_stmt_list (94)
    on left: 94 95, on right: 88 89 95
ttl_ax_stmt (95)
    on left: 96, on right: 94 95
count_ax_stmt_list (96)
    on left: 97 98, on right: 88 89 98
count_ax_stmt (97)
    on left: 99 100 101 102, on right: 97 98
bit_list (98)
    on left: 103, on right: 102


state 0

    0 $accept: . prog $end

    AXSTART      shift, and go to state 1
    TABSTART     shift, and go to state 2
    DATA_STRUCT  shift, and go to state 3

    prog  go to state 4


state 1

    3 prog: AXSTART . '{' ax_list '}'

    '{'  shift, and go to state 5


state 2

    4 prog: TABSTART . '{' tab_list '}'

    '{'  shift, and go to state 6


state 3

    2 prog: DATA_STRUCT . ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    ';'  shift, and go to state 7


state 4

    0 $accept: prog . $end

    $end  shift, and go to state 8


state 5

    3 prog: AXSTART '{' . ax_list '}'

    error  shift, and go to state 9
    AX     shift, and go to state 10

    ax_list  go to state 11
    ax_defn  go to state 12


state 6

    4 prog: TABSTART '{' . tab_list '}'

    error  shift, and go to state 13
    TAB    shift, and go to state 14

    tab_list  go to state 15
    tab_defn  go to state 16


state 7

    2 prog: DATA_STRUCT ';' . REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    REC_LEN  shift, and go to state 17


state 8

    0 $accept: prog $end .

    $default  accept


state 9

   90 ax_defn: error . ';'

    ';'  shift, and go to state 18


state 10

   88 ax_defn: AX . NAME ';' ttl_ax_stmt_list count_ax_stmt_list
   89        | AX . NAME ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list

    NAME  shift, and go to state 19


state 11

    3 prog: AXSTART '{' ax_list . '}'
   87 ax_list: ax_list . ax_defn

    error  shift, and go to state 9
    AX     shift, and go to state 10
    '}'    shift, and go to state 20

    ax_defn  go to state 21


state 12

   86 ax_list: ax_defn .

    $default  reduce using rule 86 (ax_list)


state 13

   85 tab_defn: error . ';'

    ';'  shift, and go to state 22


state 14

   83 tab_defn: TAB . NAME NAME ';'
   84         | TAB . NAME NAME ';' COND_START expression ';'

    NAME  shift, and go to state 23


state 15

    4 prog: TABSTART '{' tab_list . '}'
   82 tab_list: tab_list . tab_defn

    error  shift, and go to state 13
    '}'    shift, and go to state 24
    TAB    shift, and go to state 14

    tab_defn  go to state 25


state 16

   81 tab_list: tab_defn .

    $default  reduce using rule 81 (tab_list)


state 17

    2 prog: DATA_STRUCT ';' REC_LEN . '=' INUMBER ';' @1 ED_START top_level_item_list ED_END

    '='  shift, and go to state 26


state 18

   90 ax_defn: error ';' .

    $default  reduce using rule 90 (ax_defn)


state 19

   88 ax_defn: AX NAME . ';' ttl_ax_stmt_list count_ax_stmt_list
   89        | AX NAME . ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list

    ';'  shift, and go to state 27


state 20

    3 prog: AXSTART '{' ax_list '}' .

    $default  reduce using rule 3 (prog)


state 21

   87 ax_list: ax_list ax_defn .

    $default  reduce using rule 87 (ax_list)


state 22

   85 tab_defn: error ';' .

    $default  reduce using rule 85 (tab_defn)


state 23

   83 tab_defn: TAB NAME . NAME ';'
   84         | TAB NAME . NAME ';' COND_START expression ';'

    NAME  shift, and go to state 28


state 24

    4 prog: TABSTART '{' tab_list '}' .

    $default  reduce using rule 4 (prog)


state 25

   82 tab_list: tab_list tab_defn .

    $default  reduce using rule 82 (tab_list)


state 26

    2 prog: DATA_STRUCT ';' REC_LEN '=' . INUMBER ';' @1 ED_START top_level_item_list ED_END

    INUMBER  shift, and go to state 29


state 27

   88 ax_defn: AX NAME ';' . ttl_ax_stmt_list count_ax_stmt_list
   89        | AX NAME ';' . COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list

    TTL         shift, and go to state 30
    COND_START  shift, and go to state 31

    ttl_ax_stmt_list  go to state 32
    ttl_ax_stmt       go to state 33


state 28

   83 tab_defn: TAB NAME NAME . ';'
   84         | TAB NAME NAME . ';' COND_START expression ';'

    ';'  shift, and go to state 34


state 29

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER . ';' @1 ED_START top_level_item_list ED_END

    ';'  shift, and go to state 35


state 30

   96 ttl_ax_stmt: TTL . ';' TEXT ';'

    ';'  shift, and go to state 36


state 31

   89 ax_defn: AX NAME ';' COND_START . expression ';' ttl_ax_stmt_list count_ax_stmt_list

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 44


state 32

   88 ax_defn: AX NAME ';' ttl_ax_stmt_list . count_ax_stmt_list
   95 ttl_ax_stmt_list: ttl_ax_stmt_list . ttl_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    TTL  shift, and go to state 30
    BIT  shift, and go to state 47

    ttl_ax_stmt         go to state 48
    count_ax_stmt_list  go to state 49
    count_ax_stmt       go to state 50
    bit_list            go to state 51


state 33

   94 ttl_ax_stmt_list: ttl_ax_stmt .

    $default  reduce using rule 94 (ttl_ax_stmt_list)


state 34

   83 tab_defn: TAB NAME NAME ';' .
   84         | TAB NAME NAME ';' . COND_START expression ';'

    COND_START  shift, and go to state 52

    $default  reduce using rule 83 (tab_defn)


state 35

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' . @1 ED_START top_level_item_list ED_END

    $default  reduce using rule 1 (@1)

    @1  go to state 53


state 36

   96 ttl_ax_stmt: TTL ';' . TEXT ';'

    TEXT  shift, and go to state 54


state 37

   74 expression: TEXT .

    $default  reduce using rule 74 (expression)


state 38

   70 expression: NAME .
   71           | NAME . '[' expression ']'
   72           | NAME . '[' expression ',' expression ']'
   73           | NAME . '(' expr_list ')'
   76           | NAME . IN NAME

    IN   shift, and go to state 55
    '['  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 70 (expression)


state 39

   69 expression: FNUMBER .

    $default  reduce using rule 69 (expression)


state 40

   68 expression: INUMBER .

    $default  reduce using rule 68 (expression)


state 41

   75 expression: '(' . expression ')'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 58


state 42

   57 expression: '-' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 59


state 43

   67 expression: NOT . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 60


state 44

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   89 ax_defn: AX NAME ';' COND_START expression . ';' ttl_ax_stmt_list count_ax_stmt_list

    ';'     shift, and go to state 61
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 45

   99 count_ax_stmt: TOT . ';' TEXT ';'
  100              | TOT . ';' TEXT ';' COND_START expression ';'

    ';'  shift, and go to state 76


state 46

  101 count_ax_stmt: CNT . ';' TEXT ';' COND_START expression ';'

    ';'  shift, and go to state 77


state 47

  103 bit_list: BIT . NAME ';' stub_list ';'

    NAME  shift, and go to state 78


state 48

   95 ttl_ax_stmt_list: ttl_ax_stmt_list ttl_ax_stmt .

    $default  reduce using rule 95 (ttl_ax_stmt_list)


state 49

   88 ax_defn: AX NAME ';' ttl_ax_stmt_list count_ax_stmt_list .
   98 count_ax_stmt_list: count_ax_stmt_list . count_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    BIT  shift, and go to state 47

    $default  reduce using rule 88 (ax_defn)

    count_ax_stmt  go to state 79
    bit_list       go to state 51


state 50

   97 count_ax_stmt_list: count_ax_stmt .

    $default  reduce using rule 97 (count_ax_stmt_list)


state 51

  102 count_ax_stmt: bit_list .

    $default  reduce using rule 102 (count_ax_stmt)


state 52

   84 tab_defn: TAB NAME NAME ';' COND_START . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 80


state 53

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 . ED_START top_level_item_list ED_END

    ED_START  shift, and go to state 81


state 54

   96 ttl_ax_stmt: TTL ';' TEXT . ';'

    ';'  shift, and go to state 82


state 55

   76 expression: NAME IN . NAME

    NAME  shift, and go to state 83


state 56

   71 expression: NAME '[' . expression ']'
   72           | NAME '[' . expression ',' expression ']'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 84


state 57

   73 expression: NAME '(' . expr_list ')'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expr_list   go to state 85
    expression  go to state 86


state 58

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   75           | '(' expression . ')'

    ')'     shift, and go to state 87
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 59

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   57           | '-' expression .
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 57 (expression)


state 60

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   67           | NOT expression .

    $default  reduce using rule 67 (expression)


state 61

   89 ax_defn: AX NAME ';' COND_START expression ';' . ttl_ax_stmt_list count_ax_stmt_list

    TTL  shift, and go to state 30

    ttl_ax_stmt_list  go to state 88
    ttl_ax_stmt       go to state 33


state 62

   66 expression: expression '=' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 89


state 63

   64 expression: expression LOGOR . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 90


state 64

   65 expression: expression LOGAND . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 91


state 65

   63 expression: expression NOEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 92


state 66

   62 expression: expression ISEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 93


state 67

   58 expression: expression '<' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 94


state 68

   59 expression: expression '>' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 95


state 69

   61 expression: expression GEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 96


state 70

   60 expression: expression LEQ . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 97


state 71

   53 expression: expression '-' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 98


state 72

   52 expression: expression '+' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 99


state 73

   54 expression: expression '*' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 100


state 74

   55 expression: expression '/' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 101


state 75

   56 expression: expression '%' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 102


state 76

   99 count_ax_stmt: TOT ';' . TEXT ';'
  100              | TOT ';' . TEXT ';' COND_START expression ';'

    TEXT  shift, and go to state 103


state 77

  101 count_ax_stmt: CNT ';' . TEXT ';' COND_START expression ';'

    TEXT  shift, and go to state 104


state 78

  103 bit_list: BIT NAME . ';' stub_list ';'

    ';'  shift, and go to state 105


state 79

   98 count_ax_stmt_list: count_ax_stmt_list count_ax_stmt .

    $default  reduce using rule 98 (count_ax_stmt_list)


state 80

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   84 tab_defn: TAB NAME NAME ';' COND_START expression . ';'

    ';'     shift, and go to state 106
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 81

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START . top_level_item_list ED_END

    DEFINELIST  shift, and go to state 107
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113

    top_level_item_list  go to state 114
    top_level_item       go to state 115
    xtcc_type            go to state 116
    func_defn            go to state 117
    decl                 go to state 118
    func_decl            go to state 119


state 82

   96 ttl_ax_stmt: TTL ';' TEXT ';' .

    $default  reduce using rule 96 (ttl_ax_stmt)


state 83

   76 expression: NAME IN NAME .

    $default  reduce using rule 76 (expression)


state 84

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   71           | NAME '[' expression . ']'
   72           | NAME '[' expression . ',' expression ']'

    ']'     shift, and go to state 120
    '='     shift, and go to state 62
    ','     shift, and go to state 121
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 85

   51 expr_list: expr_list . ',' expression
   73 expression: NAME '(' expr_list . ')'

    ')'  shift, and go to state 122
    ','  shift, and go to state 123


state 86

   50 expr_list: expression .
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 50 (expr_list)


state 87

   75 expression: '(' expression ')' .

    $default  reduce using rule 75 (expression)


state 88

   89 ax_defn: AX NAME ';' COND_START expression ';' ttl_ax_stmt_list . count_ax_stmt_list
   95 ttl_ax_stmt_list: ttl_ax_stmt_list . ttl_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    TTL  shift, and go to state 30
    BIT  shift, and go to state 47

    ttl_ax_stmt         go to state 48
    count_ax_stmt_list  go to state 124
    count_ax_stmt       go to state 50
    bit_list            go to state 51


state 89

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   66           | expression '=' expression .

    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 66 (expression)


state 90

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   64           | expression LOGOR expression .
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 64 (expression)


state 91

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   65           | expression LOGAND expression .
   66           | expression . '=' expression

    NOEQ  shift, and go to state 65
    ISEQ  shift, and go to state 66
    '<'   shift, and go to state 67
    '>'   shift, and go to state 68
    GEQ   shift, and go to state 69
    LEQ   shift, and go to state 70
    '-'   shift, and go to state 71
    '+'   shift, and go to state 72
    '*'   shift, and go to state 73
    '/'   shift, and go to state 74
    '%'   shift, and go to state 75

    $default  reduce using rule 65 (expression)


state 92

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   63           | expression NOEQ expression .
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '<'  shift, and go to state 67
    '>'  shift, and go to state 68
    GEQ  shift, and go to state 69
    LEQ  shift, and go to state 70
    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 63 (expression)


state 93

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   62           | expression ISEQ expression .
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '<'  shift, and go to state 67
    '>'  shift, and go to state 68
    GEQ  shift, and go to state 69
    LEQ  shift, and go to state 70
    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 62 (expression)


state 94

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   58           | expression '<' expression .
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 58 (expression)


state 95

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   59           | expression '>' expression .
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 59 (expression)


state 96

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   61           | expression GEQ expression .
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 61 (expression)


state 97

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   60           | expression LEQ expression .
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '-'  shift, and go to state 71
    '+'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 60 (expression)


state 98

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   53           | expression '-' expression .
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 53 (expression)


state 99

   52 expression: expression . '+' expression
   52           | expression '+' expression .
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 52 (expression)


state 100

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   54           | expression '*' expression .
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 54 (expression)


state 101

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   55           | expression '/' expression .
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 55 (expression)


state 102

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   56           | expression '%' expression .
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    $default  reduce using rule 56 (expression)


state 103

   99 count_ax_stmt: TOT ';' TEXT . ';'
  100              | TOT ';' TEXT . ';' COND_START expression ';'

    ';'  shift, and go to state 125


state 104

  101 count_ax_stmt: CNT ';' TEXT . ';' COND_START expression ';'

    ';'  shift, and go to state 126


state 105

  103 bit_list: BIT NAME ';' . stub_list ';'

    TEXT  shift, and go to state 127

    stub_list  go to state 128
    stub       go to state 129


state 106

   84 tab_defn: TAB NAME NAME ';' COND_START expression ';' .

    $default  reduce using rule 84 (tab_defn)


state 107

   20 decl: DEFINELIST . NAME '=' range_list ';'

    NAME  shift, and go to state 130


state 108

    9 xtcc_type: VOID_T .

    $default  reduce using rule 9 (xtcc_type)


state 109

   10 xtcc_type: INT8_T .

    $default  reduce using rule 10 (xtcc_type)


state 110

   11 xtcc_type: INT16_T .

    $default  reduce using rule 11 (xtcc_type)


state 111

   12 xtcc_type: INT32_T .

    $default  reduce using rule 12 (xtcc_type)


state 112

   13 xtcc_type: FLOAT_T .

    $default  reduce using rule 13 (xtcc_type)


state 113

   14 xtcc_type: DOUBLE_T .

    $default  reduce using rule 14 (xtcc_type)


state 114

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list . ED_END
    6 top_level_item_list: top_level_item_list . top_level_item

    DEFINELIST  shift, and go to state 107
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113
    ED_END      shift, and go to state 131

    top_level_item  go to state 132
    xtcc_type       go to state 116
    func_defn       go to state 117
    decl            go to state 118
    func_decl       go to state 119


state 115

    5 top_level_item_list: top_level_item .

    $default  reduce using rule 5 (top_level_item_list)


state 116

   16 func_defn: xtcc_type . NAME '(' decl_comma_list ')' @2 compound_stmt
   17 decl: xtcc_type . NAME ';'
   18     | xtcc_type . NAME '=' expression ';'
   19     | xtcc_type . NAME '[' INUMBER ']' ';'
   22 func_decl: xtcc_type . NAME '(' decl_comma_list ')' ';'

    NAME  shift, and go to state 133


state 117

    8 top_level_item: func_defn .

    $default  reduce using rule 8 (top_level_item)


state 118

    7 top_level_item: decl .

    $default  reduce using rule 7 (top_level_item)


state 119

   21 decl: func_decl .

    $default  reduce using rule 21 (decl)


state 120

   71 expression: NAME '[' expression ']' .

    $default  reduce using rule 71 (expression)


state 121

   72 expression: NAME '[' expression ',' . expression ']'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 134


state 122

   73 expression: NAME '(' expr_list ')' .

    $default  reduce using rule 73 (expression)


state 123

   51 expr_list: expr_list ',' . expression

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 135


state 124

   89 ax_defn: AX NAME ';' COND_START expression ';' ttl_ax_stmt_list count_ax_stmt_list .
   98 count_ax_stmt_list: count_ax_stmt_list . count_ax_stmt

    TOT  shift, and go to state 45
    CNT  shift, and go to state 46
    BIT  shift, and go to state 47

    $default  reduce using rule 89 (ax_defn)

    count_ax_stmt  go to state 79
    bit_list       go to state 51


state 125

   99 count_ax_stmt: TOT ';' TEXT ';' .
  100              | TOT ';' TEXT ';' . COND_START expression ';'

    COND_START  shift, and go to state 136

    $default  reduce using rule 99 (count_ax_stmt)


state 126

  101 count_ax_stmt: CNT ';' TEXT ';' . COND_START expression ';'

    COND_START  shift, and go to state 137


state 127

   93 stub: TEXT . '=' INUMBER ';'

    '='  shift, and go to state 138


state 128

   92 stub_list: stub_list . stub
  103 bit_list: BIT NAME ';' stub_list . ';'

    ';'   shift, and go to state 139
    TEXT  shift, and go to state 127

    stub  go to state 140


state 129

   91 stub_list: stub .

    $default  reduce using rule 91 (stub_list)


state 130

   20 decl: DEFINELIST NAME . '=' range_list ';'

    '='  shift, and go to state 141


state 131

    2 prog: DATA_STRUCT ';' REC_LEN '=' INUMBER ';' @1 ED_START top_level_item_list ED_END .

    $default  reduce using rule 2 (prog)


state 132

    6 top_level_item_list: top_level_item_list top_level_item .

    $default  reduce using rule 6 (top_level_item_list)


state 133

   16 func_defn: xtcc_type NAME . '(' decl_comma_list ')' @2 compound_stmt
   17 decl: xtcc_type NAME . ';'
   18     | xtcc_type NAME . '=' expression ';'
   19     | xtcc_type NAME . '[' INUMBER ']' ';'
   22 func_decl: xtcc_type NAME . '(' decl_comma_list ')' ';'

    ';'  shift, and go to state 142
    '['  shift, and go to state 143
    '('  shift, and go to state 144
    '='  shift, and go to state 145


state 134

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
   72           | NAME '[' expression ',' expression . ']'

    ']'     shift, and go to state 146
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 135

   51 expr_list: expr_list ',' expression .
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 51 (expr_list)


state 136

  100 count_ax_stmt: TOT ';' TEXT ';' COND_START . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 147


state 137

  101 count_ax_stmt: CNT ';' TEXT ';' COND_START . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 148


state 138

   93 stub: TEXT '=' . INUMBER ';'

    INUMBER  shift, and go to state 149


state 139

  103 bit_list: BIT NAME ';' stub_list ';' .

    $default  reduce using rule 103 (bit_list)


state 140

   92 stub_list: stub_list stub .

    $default  reduce using rule 92 (stub_list)


state 141

   20 decl: DEFINELIST NAME '=' . range_list ';'

    INUMBER  shift, and go to state 150

    range_list  go to state 151
    range       go to state 152


state 142

   17 decl: xtcc_type NAME ';' .

    $default  reduce using rule 17 (decl)


state 143

   19 decl: xtcc_type NAME '[' . INUMBER ']' ';'

    INUMBER  shift, and go to state 153


state 144

   16 func_defn: xtcc_type NAME '(' . decl_comma_list ')' @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' . decl_comma_list ')' ';'

    VOID_T    shift, and go to state 108
    INT8_T    shift, and go to state 109
    INT16_T   shift, and go to state 110
    INT32_T   shift, and go to state 111
    FLOAT_T   shift, and go to state 112
    DOUBLE_T  shift, and go to state 113

    $default  reduce using rule 28 (var_decl)

    xtcc_type        go to state 154
    decl_comma_list  go to state 155
    var_decl         go to state 156


state 145

   18 decl: xtcc_type NAME '=' . expression ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 157


state 146

   72 expression: NAME '[' expression ',' expression ']' .

    $default  reduce using rule 72 (expression)


state 147

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
  100 count_ax_stmt: TOT ';' TEXT ';' COND_START expression . ';'

    ';'     shift, and go to state 158
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 148

   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression
  101 count_ax_stmt: CNT ';' TEXT ';' COND_START expression . ';'

    ';'     shift, and go to state 159
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 149

   93 stub: TEXT '=' INUMBER . ';'

    ';'  shift, and go to state 160


state 150

   79 range: INUMBER . '-' INUMBER
   80      | INUMBER .

    '-'  shift, and go to state 161

    $default  reduce using rule 80 (range)


state 151

   20 decl: DEFINELIST NAME '=' range_list . ';'
   78 range_list: range_list . ',' range

    ';'  shift, and go to state 162
    ','  shift, and go to state 163


state 152

   77 range_list: range .

    $default  reduce using rule 77 (range_list)


state 153

   19 decl: xtcc_type NAME '[' INUMBER . ']' ';'

    ']'  shift, and go to state 164


state 154

   25 var_decl: xtcc_type . NAME
   26         | xtcc_type . NAME '[' INUMBER ']'
   27         | xtcc_type . '&' NAME

    NAME  shift, and go to state 165
    '&'   shift, and go to state 166


state 155

   16 func_defn: xtcc_type NAME '(' decl_comma_list . ')' @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' decl_comma_list . ')' ';'
   24 decl_comma_list: decl_comma_list . ',' var_decl

    ')'  shift, and go to state 167
    ','  shift, and go to state 168


state 156

   23 decl_comma_list: var_decl .

    $default  reduce using rule 23 (decl_comma_list)


state 157

   18 decl: xtcc_type NAME '=' expression . ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 169
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 158

  100 count_ax_stmt: TOT ';' TEXT ';' COND_START expression ';' .

    $default  reduce using rule 100 (count_ax_stmt)


state 159

  101 count_ax_stmt: CNT ';' TEXT ';' COND_START expression ';' .

    $default  reduce using rule 101 (count_ax_stmt)


state 160

   93 stub: TEXT '=' INUMBER ';' .

    $default  reduce using rule 93 (stub)


state 161

   79 range: INUMBER '-' . INUMBER

    INUMBER  shift, and go to state 170


state 162

   20 decl: DEFINELIST NAME '=' range_list ';' .

    $default  reduce using rule 20 (decl)


state 163

   78 range_list: range_list ',' . range

    INUMBER  shift, and go to state 150

    range  go to state 171


state 164

   19 decl: xtcc_type NAME '[' INUMBER ']' . ';'

    ';'  shift, and go to state 172


state 165

   25 var_decl: xtcc_type NAME .
   26         | xtcc_type NAME . '[' INUMBER ']'

    '['  shift, and go to state 173

    $default  reduce using rule 25 (var_decl)


state 166

   27 var_decl: xtcc_type '&' . NAME

    NAME  shift, and go to state 174


state 167

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' . @2 compound_stmt
   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' . ';'

    ';'  shift, and go to state 175

    $default  reduce using rule 15 (@2)

    @2  go to state 176


state 168

   24 decl_comma_list: decl_comma_list ',' . var_decl

    VOID_T    shift, and go to state 108
    INT8_T    shift, and go to state 109
    INT16_T   shift, and go to state 110
    INT32_T   shift, and go to state 111
    FLOAT_T   shift, and go to state 112
    DOUBLE_T  shift, and go to state 113

    $default  reduce using rule 28 (var_decl)

    xtcc_type  go to state 154
    var_decl   go to state 177


state 169

   18 decl: xtcc_type NAME '=' expression ';' .

    $default  reduce using rule 18 (decl)


state 170

   79 range: INUMBER '-' INUMBER .

    $default  reduce using rule 79 (range)


state 171

   78 range_list: range_list ',' range .

    $default  reduce using rule 78 (range_list)


state 172

   19 decl: xtcc_type NAME '[' INUMBER ']' ';' .

    $default  reduce using rule 19 (decl)


state 173

   26 var_decl: xtcc_type NAME '[' . INUMBER ']'

    INUMBER  shift, and go to state 178


state 174

   27 var_decl: xtcc_type '&' NAME .

    $default  reduce using rule 27 (var_decl)


state 175

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' ';' .

    $default  reduce using rule 22 (func_decl)


state 176

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 . compound_stmt

    '{'  shift, and go to state 179

    compound_stmt  go to state 180
    open_curly     go to state 181


state 177

   24 decl_comma_list: decl_comma_list ',' var_decl .

    $default  reduce using rule 24 (decl_comma_list)


state 178

   26 var_decl: xtcc_type NAME '[' INUMBER . ']'

    ']'  shift, and go to state 182


state 179

   49 open_curly: '{' .

    $default  reduce using rule 49 (open_curly)


state 180

   16 func_defn: xtcc_type NAME '(' decl_comma_list ')' @2 compound_stmt .

    $default  reduce using rule 16 (func_defn)


state 181

   48 compound_stmt: open_curly . statement_list '}'

    error       shift, and go to state 183
    '{'         shift, and go to state 179
    FOR         shift, and go to state 184
    FLD         shift, and go to state 185
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 107
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 186
    IF          shift, and go to state 187
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113
    CONTINUE    shift, and go to state 188
    BREAK       shift, and go to state 189
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type       go to state 190
    decl            go to state 191
    func_decl       go to state 119
    statement_list  go to state 192
    statement       go to state 193
    list_stmt       go to state 194
    if_stmt         go to state 195
    fld_stmt        go to state 196
    compound_stmt   go to state 197
    open_curly      go to state 181
    expression      go to state 198


state 182

   26 var_decl: xtcc_type NAME '[' INUMBER ']' .

    $default  reduce using rule 26 (var_decl)


state 183

   41 statement: error . ';'

    ';'  shift, and go to state 199


state 184

   32 statement: FOR . '(' expression ';' expression ';' expression ')' @3 statement

    '('  shift, and go to state 200


state 185

   47 fld_stmt: FLD . NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

    NAME  shift, and go to state 201


state 186

   42 list_stmt: LISTA . NAME TEXT ';'
   43          | LISTA . NAME '[' expression ']' TEXT ';'
   44          | LISTA . NAME '[' expression ',' expression ']' TEXT ';'

    NAME  shift, and go to state 202


state 187

   45 if_stmt: IF . '(' expression ')' statement
   46        | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 203


state 188

   39 statement: CONTINUE . ';'

    ';'  shift, and go to state 204


state 189

   38 statement: BREAK . ';'

    ';'  shift, and go to state 205


state 190

   17 decl: xtcc_type . NAME ';'
   18     | xtcc_type . NAME '=' expression ';'
   19     | xtcc_type . NAME '[' INUMBER ']' ';'
   22 func_decl: xtcc_type . NAME '(' decl_comma_list ')' ';'

    NAME  shift, and go to state 206


state 191

   36 statement: decl .

    $default  reduce using rule 36 (statement)


state 192

   30 statement_list: statement_list . statement
   48 compound_stmt: open_curly statement_list . '}'

    error       shift, and go to state 183
    '{'         shift, and go to state 179
    '}'         shift, and go to state 207
    FOR         shift, and go to state 184
    FLD         shift, and go to state 185
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 107
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 186
    IF          shift, and go to state 187
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113
    CONTINUE    shift, and go to state 188
    BREAK       shift, and go to state 189
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 190
    decl           go to state 191
    func_decl      go to state 119
    statement      go to state 208
    list_stmt      go to state 194
    if_stmt        go to state 195
    fld_stmt       go to state 196
    compound_stmt  go to state 197
    open_curly     go to state 181
    expression     go to state 198


state 193

   29 statement_list: statement .

    $default  reduce using rule 29 (statement_list)


state 194

   37 statement: list_stmt .

    $default  reduce using rule 37 (statement)


state 195

   33 statement: if_stmt .

    $default  reduce using rule 33 (statement)


state 196

   40 statement: fld_stmt .

    $default  reduce using rule 40 (statement)


state 197

   35 statement: compound_stmt .

    $default  reduce using rule 35 (statement)


state 198

   34 statement: expression . ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 209
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 199

   41 statement: error ';' .

    $default  reduce using rule 41 (statement)


state 200

   32 statement: FOR '(' . expression ';' expression ';' expression ')' @3 statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 210


state 201

   47 fld_stmt: FLD NAME . '=' NAME '(' expression ',' expression ')' ':' INUMBER ';'

    '='  shift, and go to state 211


state 202

   42 list_stmt: LISTA NAME . TEXT ';'
   43          | LISTA NAME . '[' expression ']' TEXT ';'
   44          | LISTA NAME . '[' expression ',' expression ']' TEXT ';'

    TEXT  shift, and go to state 212
    '['   shift, and go to state 213


state 203

   45 if_stmt: IF '(' . expression ')' statement
   46        | IF '(' . expression ')' statement ELSE statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 214


state 204

   39 statement: CONTINUE ';' .

    $default  reduce using rule 39 (statement)


state 205

   38 statement: BREAK ';' .

    $default  reduce using rule 38 (statement)


state 206

   17 decl: xtcc_type NAME . ';'
   18     | xtcc_type NAME . '=' expression ';'
   19     | xtcc_type NAME . '[' INUMBER ']' ';'
   22 func_decl: xtcc_type NAME . '(' decl_comma_list ')' ';'

    ';'  shift, and go to state 142
    '['  shift, and go to state 143
    '('  shift, and go to state 215
    '='  shift, and go to state 145


state 207

   48 compound_stmt: open_curly statement_list '}' .

    $default  reduce using rule 48 (compound_stmt)


state 208

   30 statement_list: statement_list statement .

    $default  reduce using rule 30 (statement_list)


state 209

   34 statement: expression ';' .

    $default  reduce using rule 34 (statement)


state 210

   32 statement: FOR '(' expression . ';' expression ';' expression ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 216
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 211

   47 fld_stmt: FLD NAME '=' . NAME '(' expression ',' expression ')' ':' INUMBER ';'

    NAME  shift, and go to state 217


state 212

   42 list_stmt: LISTA NAME TEXT . ';'

    ';'  shift, and go to state 218


state 213

   43 list_stmt: LISTA NAME '[' . expression ']' TEXT ';'
   44          | LISTA NAME '[' . expression ',' expression ']' TEXT ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 219


state 214

   45 if_stmt: IF '(' expression . ')' statement
   46        | IF '(' expression . ')' statement ELSE statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 220
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 215

   22 func_decl: xtcc_type NAME '(' . decl_comma_list ')' ';'

    VOID_T    shift, and go to state 108
    INT8_T    shift, and go to state 109
    INT16_T   shift, and go to state 110
    INT32_T   shift, and go to state 111
    FLOAT_T   shift, and go to state 112
    DOUBLE_T  shift, and go to state 113

    $default  reduce using rule 28 (var_decl)

    xtcc_type        go to state 154
    decl_comma_list  go to state 221
    var_decl         go to state 156


state 216

   32 statement: FOR '(' expression ';' . expression ';' expression ')' @3 statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 222


state 217

   47 fld_stmt: FLD NAME '=' NAME . '(' expression ',' expression ')' ':' INUMBER ';'

    '('  shift, and go to state 223


state 218

   42 list_stmt: LISTA NAME TEXT ';' .

    $default  reduce using rule 42 (list_stmt)


state 219

   43 list_stmt: LISTA NAME '[' expression . ']' TEXT ';'
   44          | LISTA NAME '[' expression . ',' expression ']' TEXT ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ']'     shift, and go to state 224
    '='     shift, and go to state 62
    ','     shift, and go to state 225
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 220

   45 if_stmt: IF '(' expression ')' . statement
   46        | IF '(' expression ')' . statement ELSE statement

    error       shift, and go to state 183
    '{'         shift, and go to state 179
    FOR         shift, and go to state 184
    FLD         shift, and go to state 185
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 107
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 186
    IF          shift, and go to state 187
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113
    CONTINUE    shift, and go to state 188
    BREAK       shift, and go to state 189
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 190
    decl           go to state 191
    func_decl      go to state 119
    statement      go to state 226
    list_stmt      go to state 194
    if_stmt        go to state 195
    fld_stmt       go to state 196
    compound_stmt  go to state 197
    open_curly     go to state 181
    expression     go to state 198


state 221

   22 func_decl: xtcc_type NAME '(' decl_comma_list . ')' ';'
   24 decl_comma_list: decl_comma_list . ',' var_decl

    ')'  shift, and go to state 227
    ','  shift, and go to state 168


state 222

   32 statement: FOR '(' expression ';' expression . ';' expression ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ';'     shift, and go to state 228
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 223

   47 fld_stmt: FLD NAME '=' NAME '(' . expression ',' expression ')' ':' INUMBER ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 229


state 224

   43 list_stmt: LISTA NAME '[' expression ']' . TEXT ';'

    TEXT  shift, and go to state 230


state 225

   44 list_stmt: LISTA NAME '[' expression ',' . expression ']' TEXT ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 231


state 226

   45 if_stmt: IF '(' expression ')' statement .
   46        | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 232

    ELSE      [reduce using rule 45 (if_stmt)]
    $default  reduce using rule 45 (if_stmt)


state 227

   22 func_decl: xtcc_type NAME '(' decl_comma_list ')' . ';'

    ';'  shift, and go to state 175


state 228

   32 statement: FOR '(' expression ';' expression ';' . expression ')' @3 statement

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 233


state 229

   47 fld_stmt: FLD NAME '=' NAME '(' expression . ',' expression ')' ':' INUMBER ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    '='     shift, and go to state 62
    ','     shift, and go to state 234
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 230

   43 list_stmt: LISTA NAME '[' expression ']' TEXT . ';'

    ';'  shift, and go to state 235


state 231

   44 list_stmt: LISTA NAME '[' expression ',' expression . ']' TEXT ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ']'     shift, and go to state 236
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 232

   46 if_stmt: IF '(' expression ')' statement ELSE . statement

    error       shift, and go to state 183
    '{'         shift, and go to state 179
    FOR         shift, and go to state 184
    FLD         shift, and go to state 185
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 107
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 186
    IF          shift, and go to state 187
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113
    CONTINUE    shift, and go to state 188
    BREAK       shift, and go to state 189
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 190
    decl           go to state 191
    func_decl      go to state 119
    statement      go to state 237
    list_stmt      go to state 194
    if_stmt        go to state 195
    fld_stmt       go to state 196
    compound_stmt  go to state 197
    open_curly     go to state 181
    expression     go to state 198


state 233

   32 statement: FOR '(' expression ';' expression ';' expression . ')' @3 statement
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 238
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 234

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' . expression ')' ':' INUMBER ';'

    TEXT     shift, and go to state 37
    NAME     shift, and go to state 38
    FNUMBER  shift, and go to state 39
    INUMBER  shift, and go to state 40
    '('      shift, and go to state 41
    '-'      shift, and go to state 42
    NOT      shift, and go to state 43

    expression  go to state 239


state 235

   43 list_stmt: LISTA NAME '[' expression ']' TEXT ';' .

    $default  reduce using rule 43 (list_stmt)


state 236

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' . TEXT ';'

    TEXT  shift, and go to state 240


state 237

   46 if_stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 46 (if_stmt)


state 238

   32 statement: FOR '(' expression ';' expression ';' expression ')' . @3 statement

    $default  reduce using rule 31 (@3)

    @3  go to state 241


state 239

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression . ')' ':' INUMBER ';'
   52 expression: expression . '+' expression
   53           | expression . '-' expression
   54           | expression . '*' expression
   55           | expression . '/' expression
   56           | expression . '%' expression
   58           | expression . '<' expression
   59           | expression . '>' expression
   60           | expression . LEQ expression
   61           | expression . GEQ expression
   62           | expression . ISEQ expression
   63           | expression . NOEQ expression
   64           | expression . LOGOR expression
   65           | expression . LOGAND expression
   66           | expression . '=' expression

    ')'     shift, and go to state 242
    '='     shift, and go to state 62
    LOGOR   shift, and go to state 63
    LOGAND  shift, and go to state 64
    NOEQ    shift, and go to state 65
    ISEQ    shift, and go to state 66
    '<'     shift, and go to state 67
    '>'     shift, and go to state 68
    GEQ     shift, and go to state 69
    LEQ     shift, and go to state 70
    '-'     shift, and go to state 71
    '+'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75


state 240

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' TEXT . ';'

    ';'  shift, and go to state 243


state 241

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 . statement

    error       shift, and go to state 183
    '{'         shift, and go to state 179
    FOR         shift, and go to state 184
    FLD         shift, and go to state 185
    TEXT        shift, and go to state 37
    NAME        shift, and go to state 38
    DEFINELIST  shift, and go to state 107
    FNUMBER     shift, and go to state 39
    INUMBER     shift, and go to state 40
    LISTA       shift, and go to state 186
    IF          shift, and go to state 187
    '('         shift, and go to state 41
    VOID_T      shift, and go to state 108
    INT8_T      shift, and go to state 109
    INT16_T     shift, and go to state 110
    INT32_T     shift, and go to state 111
    FLOAT_T     shift, and go to state 112
    DOUBLE_T    shift, and go to state 113
    CONTINUE    shift, and go to state 188
    BREAK       shift, and go to state 189
    '-'         shift, and go to state 42
    NOT         shift, and go to state 43

    xtcc_type      go to state 190
    decl           go to state 191
    func_decl      go to state 119
    statement      go to state 244
    list_stmt      go to state 194
    if_stmt        go to state 195
    fld_stmt       go to state 196
    compound_stmt  go to state 197
    open_curly     go to state 181
    expression     go to state 198


state 242

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' . ':' INUMBER ';'

    ':'  shift, and go to state 245


state 243

   44 list_stmt: LISTA NAME '[' expression ',' expression ']' TEXT ';' .

    $default  reduce using rule 44 (list_stmt)


state 244

   32 statement: FOR '(' expression ';' expression ';' expression ')' @3 statement .

    $default  reduce using rule 32 (statement)


state 245

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' . INUMBER ';'

    INUMBER  shift, and go to state 246


state 246

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER . ';'

    ';'  shift, and go to state 247


state 247

   47 fld_stmt: FLD NAME '=' NAME '(' expression ',' expression ')' ':' INUMBER ';' .

    $default  reduce using rule 47 (fld_stmt)
